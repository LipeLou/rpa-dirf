"""
Automa√ß√£o EFD-REINF - Receita Federal
Sistema para automatizar preenchimento de formul√°rios
"""

# Imports
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium_stealth import stealth
import time
import random
import pandas as pd
import os
import sys
import platform
import sqlite3
from datetime import datetime
import pyautogui
from PIL import Image
import traceback

# Importar configura√ß√µes
from config import *

# Configurar encoding UTF-8 para Windows
if platform.system() == "Windows":
    sys.stdout.reconfigure(encoding='utf-8')
    sys.stderr.reconfigure(encoding='utf-8')

# ============================================================
# CONFIGURA√á√ïES PYAUTOGUI
# ============================================================

# Configurar PyAutoGUI para seguran√ßa e performance
pyautogui.FAILSAFE = PYAUTOGUI_FAILSAFE
pyautogui.PAUSE = PYAUTOGUI_PAUSE

# Detectar sistema operacional para configura√ß√µes espec√≠ficas
SISTEMA_OPERACIONAL = platform.system()

# Mapeamento de depend√™ncias do Excel para valores do formul√°rio
MAPEAMENTO_DEPENDENCIAS = {
    'TITULAR': None,  # Titular n√£o √© dependente
    'ESPOSA': '1',    # C√¥njuge
    'ESPOSO': '1',    # C√¥njuge
    'COMPANHEIRO(A)': '2',  # Companheiro(a) com o(a) qual tenha filho ou viva h√° mais de 5 (cinco) anos ou possua declara√ß√£o de uni√£o est√°vel
    'COMPANHEIRO': '2',
    'COMPANHEIRA': '2',
    'FILHA': '3',     # Filho(a) ou enteado(a)
    'FILHO': '3',
    'MAE': '9',       # Pais, av√≥s e bisav√≥s
    'M√ÉE': '9',
    'MAMAE': '9',
    'MAM√ÉE': '9',
    'PAI': '9',
    'AGREGADO': '99', # Agregado/Outros
    'OUTRA DEPENDENCIA': '99',
    'OUTRA DEPEND√äNCIA': '99',
    'SOGRO': '99',
    'SOGRA': '99'
}

# ============================================================
# CLASSE PRINCIPAL
# ============================================================

class AutomacaoEFD:
    """
    Classe principal para automa√ß√£o completa do EFD-REINF com assinatura eletr√¥nica.
    
    Esta classe gerencia todo o processo de automa√ß√£o, incluindo:
    - Configura√ß√£o do navegador Chrome
    - Preenchimento autom√°tico de formul√°rios
    - Sistema de checkpoints para controle de progresso
    - Assinatura eletr√¥nica automatizada (M√©todos A e B)
    - Detec√ß√£o autom√°tica de confirma√ß√µes de sucesso
    - Navega√ß√£o autom√°tica entre CPFs
    
    Attributes:
        driver (webdriver.Chrome): Inst√¢ncia do navegador Chrome
        cpf_titular_atual (str): CPF do titular sendo processado atualmente
        nome_titular_atual (str): Nome do titular sendo processado
        verificar_dados_manual (bool): Se deve pausar para verifica√ß√£o manual
        metodo_assinatura (int): M√©todo de assinatura (1=teclas, 2=mouse)
        coordenadas_mouse_metodo_b (tuple): Coordenadas (x,y) para m√©todo B
    """
    
    def __init__(self):
        """
        Inicializa a automa√ß√£o configurando navegador e banco de dados.
        
        Configura:
        - Chrome com perfil dedicado e prote√ß√µes anti-detec√ß√£o
        - Banco de dados SQLite para checkpoints
        - Configura√ß√µes padr√£o (verifica√ß√£o manual = True, m√©todo A)
        """
        self.driver = None
        self.cpf_titular_atual = None
        self.nome_titular_atual = None
        self.verificar_dados_manual = VERIFICACAO_MANUAL_PADRAO  # Por padr√£o, verificar dados manualmente
        self.metodo_assinatura = METODO_ASSINATURA_PADRAO  # Por padr√£o, usar m√©todo A
        self.coordenadas_mouse_metodo_b = COORDENADAS_MOUSE_METODO_B  # Carregar do config
        self.inicializar_banco_dados()
        self.configurar_chrome()
    
    def configurar_chrome(self):
        """
        Configura e abre uma inst√¢ncia do Chrome otimizada para automa√ß√£o.
        
        Configura√ß√µes aplicadas:
        - Perfil dedicado em 'chrome_efd/' para isolamento
        - Prote√ß√µes anti-detec√ß√£o com undetected-chromedriver
        - Selenium stealth para mascarar automa√ß√£o
        - Configura√ß√µes de performance e estabilidade
        
        Raises:
            Exception: Se n√£o conseguir inicializar o Chrome
        """
        print("\n" + "="*60)
        print("üîß CONFIGURANDO CHROME")
        print("="*60)
        
        print("\n‚úÖ Usando perfil DEDICADO de automa√ß√£o")
        options = uc.ChromeOptions()
        
        # Usar perfil DEDICADO
        profile_dir = os.path.join(os.getcwd(), CHROME_PROFILE_DIR)
        if not os.path.exists(profile_dir):
            os.makedirs(profile_dir)
            print("üìÅ Perfil criado")
        
        options.add_argument(f'--user-data-dir={profile_dir}')
        
        # Adicionar argumentos do Chrome do config
        for arg in CHROME_ARGS:
            options.add_argument(arg)
        
        options.add_argument('--start-maximized')
        
        print("üöÄ Abrindo Chrome...")
        # Especificar vers√£o do Chrome para compatibilidade do ChromeDriver
        self.driver = uc.Chrome(options=options, use_subprocess=True, version_main=CHROME_VERSION)
        
        # Aplicar prote√ß√£o anti-detec√ß√£o
        stealth(self.driver,
            languages=["pt-BR", "pt"],
            vendor="Google Inc.",
            platform="Win32",
            webgl_vendor="Intel Inc.",
            renderer="Intel Iris OpenGL Engine",
            fix_hairline=True,
        )
        
        print("‚úÖ Chrome aberto!")
    
    def abrir_site(self):
        """Abre o site da Receita Federal"""
        print(f"üåê Acessando: {URL_BASE}")
        self.driver.get(URL_BASE)
        print("‚úÖ Site carregado!")
    
    def aguardar_login(self):
        """Aguarda o usu√°rio fazer login e navegar at√© o formul√°rio"""
        print("\n" + "="*60)
        print("üîê ETAPA: NAVEGA√á√ÉO MANUAL AT√â O FORMUL√ÅRIO")
        print("="*60)
        print("\nüìã CLIQUE NOS BOT√ïES MANUALMENTE:")
        print("   1. Navegue pelos menus do site")
        print("   2. Clique nos bot√µes necess√°rios")
        print("   3. Chegue at√© a TELA DO FORMUL√ÅRIO")
        print("\n‚ö†Ô∏è IMPORTANTE - Os 3 campos devem estar VIS√çVEIS na tela:")
        print("   ‚úì Campo 'Per√≠odo de Apura√ß√£o' (MM/AAAA)")
        print("   ‚úì Campo 'CNPJ' (00.000.000/0000-00)")
        print("   ‚úì Campo 'CPF do Benefici√°rio' (000.000.000-00)")
        print("\n‚ö†Ô∏è S√ì PRESSIONE ENTER QUANDO VER OS 3 CAMPOS!")
        print("   ‚Üí URL permanecer√° a mesma (p√°gina din√¢mica)")
        print("   ‚Üí C√≥digo aguardar√° at√© 15s o formul√°rio carregar")
        print("   ‚Üí Depois preenche automaticamente!")
        print("="*60)
        try:
            input("\n‚úÖ V√ä OS 3 CAMPOS NA TELA? Pressione ENTER para automa√ß√£o...\n")
        except (EOFError, KeyboardInterrupt):
            print(f"\n‚ö†Ô∏è Executando via script - aguardando {TEMPO_ESPERA_SCRIPT}s...")
            time.sleep(TEMPO_ESPERA_SCRIPT)
    
    def inspecionar_pagina(self):
        """Permite inspecionar a p√°gina atual para debug"""
        print("\n" + "="*60)
        print("üîç INSPE√á√ÉO DA P√ÅGINA")
        print("="*60)
        print(f"URL: {self.driver.current_url}")
        print(f"T√≠tulo: {self.driver.title}")
        
        # Listar todos os inputs
        inputs = self.driver.find_elements(By.TAG_NAME, "input")
        print(f"\nüìã CAMPOS INPUT ENCONTRADOS ({len(inputs)}):")
        
        for i, inp in enumerate(inputs):
            try:
                id_attr = inp.get_attribute("id") or "sem-id"
                name_attr = inp.get_attribute("name") or "sem-name"
                placeholder = inp.get_attribute("placeholder") or "sem-placeholder"
                tipo = inp.get_attribute("type") or "text"
                print(f"   {i+1:2d}. ID: '{id_attr}' | Name: '{name_attr}' | Placeholder: '{placeholder}' | Type: '{tipo}'")
            except:
                print(f"   {i+1:2d}. [erro ao ler atributos]")
        
        # Listar todos os bot√µes
        botoes = self.driver.find_elements(By.TAG_NAME, "button")
        print(f"\nüîò BOT√ïES ENCONTRADOS ({len(botoes)}):")
        
        for i, btn in enumerate(botoes):
            try:
                texto = btn.text or "sem-texto"
                id_attr = btn.get_attribute("id") or "sem-id"
                tipo = btn.get_attribute("type") or "button"
                print(f"   {i+1:2d}. Texto: '{texto}' | ID: '{id_attr}' | Type: '{tipo}'")
            except:
                print(f"   {i+1:2d}. [erro ao ler atributos]")
        
        print("="*60)
    
    def fechar(self):
        """Fecha o navegador"""
        if self.driver:
            print("\nüîí Fechando Chrome...")
            self.driver.quit()
            print("‚úÖ Chrome fechado!")
    
    # ============================================================
    # FUN√á√ïES DE AUTOMA√á√ÉO (a serem implementadas)
    # ============================================================
    
    def delay_humano(self, min_sec=INTERVALO_ESPERA_MIN, max_sec=INTERVALO_ESPERA_MAX):
        """Adiciona delay aleat√≥rio para simular comportamento humano"""
        time.sleep(random.uniform(min_sec, max_sec))
    
    def digitar_devagar(self, elemento, texto):
        """Digita texto caractere por caractere"""
        for char in str(texto):
            elemento.send_keys(char)
            time.sleep(random.uniform(INTERVALO_DIGITACAO_MIN, INTERVALO_DIGITACAO_MAX))
    
    def formatar_valor(self, valor):
        """Formata um valor para 2 casas decimais no padr√£o brasileiro (v√≠rgula)"""
        try:
            if isinstance(valor, str):
                # Remover caracteres n√£o num√©ricos exceto v√≠rgula e ponto
                valor_limpo = ''.join(c for c in valor if c.isdigit() or c in [',', '.'])
                # Substituir v√≠rgula por ponto para convers√£o
                valor_limpo = valor_limpo.replace(',', '.')
                valor_float = float(valor_limpo)
            else:
                valor_float = float(valor)
            
            # Arredondar para 2 casas decimais
            valor_arredondado = round(valor_float, 2)
            
            # Formatar com 2 casas decimais e v√≠rgula
            return f"{valor_arredondado:.2f}".replace('.', ',')
        except (ValueError, TypeError):
            return '0,00'
    
    def valor_eh_zero_ou_nulo(self, valor):
        """
        Verifica se um valor √© zero ou nulo (sem valor).
        
        Args:
            valor: Valor a ser verificado (pode ser str, float, int, None, etc.)
        
        Returns:
            bool: True se o valor for zero ou nulo, False caso contr√°rio
        """
        # Se for None ou string vazia
        if valor is None or (isinstance(valor, str) and valor.strip() == ''):
            return True
        
        # Tentar converter para float e verificar se √© zero
        try:
            if isinstance(valor, str):
                # Remover caracteres n√£o num√©ricos exceto v√≠rgula e ponto
                valor_limpo = ''.join(c for c in valor if c.isdigit() or c in [',', '.'])
                # Substituir v√≠rgula por ponto para convers√£o
                valor_limpo = valor_limpo.replace(',', '.')
                valor_float = float(valor_limpo)
            else:
                valor_float = float(valor)
            
            # Verificar se √© zero (com toler√¢ncia para pequenas diferen√ßas de ponto flutuante)
            return abs(valor_float) < 0.01
        except (ValueError, TypeError):
            # Se n√£o conseguir converter, considerar como nulo
            return True

    def salvar_coordenadas_config(self, coordenadas):
        """Salva as coordenadas no arquivo config.py"""
        try:
            # Ler o arquivo atual
            with open('config.py', 'r', encoding='utf-8') as f:
                conteudo = f.read()
            
            # Substituir a linha das coordenadas
            if coordenadas:
                nova_linha = f"COORDENADAS_MOUSE_METODO_B = {coordenadas}"
            else:
                nova_linha = "COORDENADAS_MOUSE_METODO_B = None"
            
            # Encontrar e substituir a linha
            linhas = conteudo.split('\n')
            for i, linha in enumerate(linhas):
                if linha.startswith('COORDENADAS_MOUSE_METODO_B'):
                    linhas[i] = nova_linha
                    break
            
            # Salvar o arquivo
            with open('config.py', 'w', encoding='utf-8') as f:
                f.write('\n'.join(linhas))
            
            print(f"üíæ Coordenadas salvas no config.py: {coordenadas}")
            return True
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao salvar coordenadas no config.py: {e}")
            return False
    
    def mapear_dependencia(self, dependencia_dataframe):
        """Mapeia a depend√™ncia do Excel para o valor do formul√°rio"""
        dependencia_upper = str(dependencia_dataframe).strip().upper()
        
        # Buscar mapeamento exato
        if dependencia_upper in MAPEAMENTO_DEPENDENCIAS:
            return MAPEAMENTO_DEPENDENCIAS[dependencia_upper]
        
        # Buscar mapeamento parcial (para varia√ß√µes)
        for key, value in MAPEAMENTO_DEPENDENCIAS.items():
            if key in dependencia_upper or dependencia_upper in key:
                return value
        
        # Se n√£o encontrar, usar "Agregado/Outros" como padr√£o
        print(f"‚ö†Ô∏è Depend√™ncia n√£o mapeada: '{dependencia_dataframe}' - usando '99' (Agregado/Outros)")
        return '99'
    
    def inicializar_banco_dados(self):
        """Inicializa o banco de dados SQLite para checkpoint"""
        try:
            conn = sqlite3.connect(BANCO_DADOS)
            cursor = conn.cursor()
            
            # Criar tabela de progresso
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS progresso_efd (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    cpf_titular TEXT NOT NULL,
                    nome_titular TEXT,
                    etapa_atual TEXT NOT NULL,
                    status TEXT NOT NULL,
                    dados_json TEXT,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                    observacoes TEXT
                )
            ''')
            
            # Criar tabela de dependentes processados
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS dependentes_processados (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    cpf_titular TEXT NOT NULL,
                    cpf_dependente TEXT NOT NULL,
                    relacao TEXT,
                    descricao_agregado TEXT,
                    status TEXT NOT NULL,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # Criar tabela de planos processados
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS planos_processados (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    cpf_titular TEXT NOT NULL,
                    cnpj_operadora TEXT NOT NULL,
                    valor_titular TEXT,
                    status TEXT NOT NULL,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # Criar tabela de informa√ß√µes dos dependentes
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS info_dependentes_processados (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    cpf_titular TEXT NOT NULL,
                    cpf_dependente TEXT NOT NULL,
                    valor_dependente TEXT,
                    status TEXT NOT NULL,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            conn.commit()
            conn.close()
            print("‚úÖ Banco de dados inicializado")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao inicializar banco de dados: {e}")
            return False
    
    def salvar_checkpoint(self, cpf_titular, nome_titular, etapa, status, dados=None, observacoes=None):
        """Salva checkpoint do progresso"""
        try:
            import json
            
            conn = sqlite3.connect(BANCO_DADOS)
            cursor = conn.cursor()
            
            dados_json = json.dumps(dados) if dados else None
            
            cursor.execute('''
                INSERT INTO progresso_efd 
                (cpf_titular, nome_titular, etapa_atual, status, dados_json, observacoes)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (cpf_titular, nome_titular, etapa, status, dados_json, observacoes))
            
            conn.commit()
            conn.close()
            print(f"üíæ Checkpoint salvo: {etapa} - {status}")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao salvar checkpoint: {e}")
            return False
    
    def salvar_dependente_processado(self, cpf_titular, cpf_dependente, relacao, descricao_agregado, status):
        """Salva dependente processado"""
        try:
            conn = sqlite3.connect(BANCO_DADOS)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT OR REPLACE INTO dependentes_processados 
                (cpf_titular, cpf_dependente, relacao, descricao_agregado, status, timestamp)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (cpf_titular, cpf_dependente, relacao, descricao_agregado, status, datetime.now().isoformat()))
            
            conn.commit()
            conn.close()
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao salvar dependente: {e}")
            return False
    
    def salvar_plano_processado(self, cpf_titular, cnpj_operadora, valor_titular, status):
        """Salva plano de sa√∫de processado"""
        try:
            conn = sqlite3.connect(BANCO_DADOS)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT OR REPLACE INTO planos_processados 
                (cpf_titular, cnpj_operadora, valor_titular, status, timestamp)
                VALUES (?, ?, ?, ?, ?)
            ''', (cpf_titular, cnpj_operadora, valor_titular, status, datetime.now().isoformat()))
            
            conn.commit()
            conn.close()
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao salvar plano: {e}")
            return False

    def verificar_grupo_completamente_processado(self, cpf_titular):
        """Verifica se um grupo foi completamente processado (chegou at√© o final)"""
        try:
            conn = sqlite3.connect(BANCO_DADOS)
            cursor = conn.cursor()
            
            # Verificar se existe checkpoint de "grupo_completo" com sucesso
            cursor.execute('''
                SELECT COUNT(*) FROM progresso_efd 
                WHERE cpf_titular = ? AND etapa_atual = 'grupo_completo' AND status = 'sucesso'
            ''', (cpf_titular,))
            
            count = cursor.fetchone()[0]
            conn.close()
            
            return count > 0
            
        except Exception as e:
            print(f"‚ùå Erro ao verificar grupo completo: {e}")
            return False

    def verificar_ultimo_status_pulado(self, cpf_titular):
        """Verifica se o √∫ltimo checkpoint do CPF foi 'pulado' (ex: CPF j√° lan√ßado)"""
        try:
            conn = sqlite3.connect(BANCO_DADOS)
            cursor = conn.cursor()
            
            # Buscar o √∫ltimo checkpoint deste CPF
            cursor.execute('''
                SELECT etapa_atual, status FROM progresso_efd 
                WHERE cpf_titular = ? 
                ORDER BY timestamp DESC 
                LIMIT 1
            ''', (cpf_titular,))
            
            resultado = cursor.fetchone()
            conn.close()
            
            if resultado:
                etapa, status = resultado
                return status == 'pulado'
            
            return False
            
        except Exception as e:
            print(f"‚ùå Erro ao verificar √∫ltimo status: {e}")
            return False

    def limpar_dados_parciais_grupo(self, cpf_titular):
        """Remove dados parciais de um grupo que n√£o foi completado"""
        try:
            conn = sqlite3.connect(BANCO_DADOS)
            cursor = conn.cursor()
            
            # Remover dependentes parciais
            cursor.execute('DELETE FROM dependentes_processados WHERE cpf_titular = ?', (cpf_titular,))
            
            # Remover planos parciais  
            cursor.execute('DELETE FROM planos_processados WHERE cpf_titular = ?', (cpf_titular,))
            
            # Remover informa√ß√µes de dependentes parciais
            cursor.execute('DELETE FROM info_dependentes_processados WHERE cpf_titular = ?', (cpf_titular,))
            
            # Remover checkpoints parciais (manter apenas se grupo foi completamente processado)
            cursor.execute('''
                DELETE FROM progresso_efd 
                WHERE cpf_titular = ? AND NOT (etapa_atual = 'grupo_completo' AND status = 'sucesso')
            ''', (cpf_titular,))
            
            conn.commit()
            conn.close()
            
            print(f"üßπ Dados parciais removidos para CPF: {cpf_titular}")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao limpar dados parciais: {e}")
            return False
    
    def salvar_info_dependente_processado(self, cpf_titular, cpf_dependente, valor_dependente, status):
        """Salva informa√ß√£o de dependente processado"""
        try:
            conn = sqlite3.connect(BANCO_DADOS)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO info_dependentes_processados 
                (cpf_titular, cpf_dependente, valor_dependente, status)
                VALUES (?, ?, ?, ?)
            ''', (cpf_titular, cpf_dependente, valor_dependente, status))
            
            conn.commit()
            conn.close()
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao salvar info dependente: {e}")
            return False
    
    def verificar_progresso(self, cpf_titular):
        """Verifica o progresso atual de um titular"""
        try:
            conn = sqlite3.connect(BANCO_DADOS)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT etapa_atual, status, timestamp, observacoes
                FROM progresso_efd 
                WHERE cpf_titular = ? 
                ORDER BY timestamp DESC 
                LIMIT 1
            ''', (cpf_titular,))
            
            resultado = cursor.fetchone()
            conn.close()
            
            if resultado:
                etapa, status, timestamp, observacoes = resultado
                print(f"üìä Progresso encontrado para {cpf_titular}:")
                print(f"   Etapa: {etapa}")
                print(f"   Status: {status}")
                print(f"   Timestamp: {timestamp}")
                if observacoes:
                    print(f"   Observa√ß√µes: {observacoes}")
                return {'etapa': etapa, 'status': status, 'timestamp': timestamp, 'observacoes': observacoes}
            else:
                print(f"üìä Nenhum progresso encontrado para {cpf_titular}")
                return None
                
        except Exception as e:
            print(f"‚ùå Erro ao verificar progresso: {e}")
            return None
    
    def limpar_progresso(self, cpf_titular=None):
        """Limpa o progresso (todos ou de um titular espec√≠fico)"""
        try:
            conn = sqlite3.connect(BANCO_DADOS)
            cursor = conn.cursor()
            
            if cpf_titular:
                cursor.execute('DELETE FROM progresso_efd WHERE cpf_titular = ?', (cpf_titular,))
                cursor.execute('DELETE FROM dependentes_processados WHERE cpf_titular = ?', (cpf_titular,))
                cursor.execute('DELETE FROM planos_processados WHERE cpf_titular = ?', (cpf_titular,))
                cursor.execute('DELETE FROM info_dependentes_processados WHERE cpf_titular = ?', (cpf_titular,))
                print(f"üóëÔ∏è Progresso limpo para {cpf_titular}")
            else:
                cursor.execute('DELETE FROM progresso_efd')
                cursor.execute('DELETE FROM dependentes_processados')
                cursor.execute('DELETE FROM planos_processados')
                cursor.execute('DELETE FROM info_dependentes_processados')
                print("üóëÔ∏è Todo progresso limpo")
            
            conn.commit()
            conn.close()
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao limpar progresso: {e}")
            return False
    
    def mostrar_status_checkpoint(self):
        """Mostra o status atual do checkpoint"""
        try:
            conn = sqlite3.connect(BANCO_DADOS)
            cursor = conn.cursor()
            
            # Contar registros por tabela
            cursor.execute('SELECT COUNT(*) FROM progresso_efd')
            total_progresso = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM dependentes_processados')
            total_dependentes = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM planos_processados')
            total_planos = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM info_dependentes_processados')
            total_info_dependentes = cursor.fetchone()[0]
            
            # √öltimos 5 registros de progresso
            cursor.execute('''
                SELECT cpf_titular, nome_titular, etapa_atual, status, timestamp 
                FROM progresso_efd 
                ORDER BY timestamp DESC 
                LIMIT 5
            ''')
            ultimos_progressos = cursor.fetchall()
            
            conn.close()
            
            print(f"\nüìä STATUS DO CHECKPOINT")
            print(f"{'='*60}")
            print(f"Total de registros de progresso: {total_progresso}")
            print(f"Total de dependentes processados: {total_dependentes}")
            print(f"Total de planos processados: {total_planos}")
            print(f"Total de informa√ß√µes de dependentes: {total_info_dependentes}")
            
            if ultimos_progressos:
                print(f"\n√öltimos 5 progressos:")
                for registro in ultimos_progressos:
                    cpf, nome, etapa, status, timestamp = registro
                    print(f"  {cpf} | {nome} | {etapa} | {status} | {timestamp}")
            
            print(f"{'='*60}\n")
            
        except Exception as e:
            print(f"‚ùå Erro ao mostrar status: {e}")
    
    def gerar_planilha_visualizacao(self):
        """Gera planilha Excel para visualiza√ß√£o do banco de dados"""
        try:
            print("\nüìä Gerando planilha de visualiza√ß√£o...")
            
            conn = sqlite3.connect(BANCO_DADOS)
            
            # Buscar dados de progresso
            df_progresso = pd.read_sql_query('''
                SELECT 
                    cpf_titular,
                    nome_titular,
                    etapa_atual,
                    status,
                    timestamp,
                    observacoes
                FROM progresso_efd 
                ORDER BY timestamp DESC
            ''', conn)
            
            # Buscar dependentes processados
            df_dependentes = pd.read_sql_query('''
                SELECT 
                    cpf_titular,
                    cpf_dependente,
                    relacao,
                    descricao_agregado,
                    status,
                    timestamp
                FROM dependentes_processados 
                ORDER BY timestamp DESC
            ''', conn)
            
            
            conn.close()
            
            # Criar resumo por CPF
            resumo_cpfs = []
            cpfs_unicos = df_progresso['cpf_titular'].unique()
            
            for cpf in cpfs_unicos:
                dados_cpf = df_progresso[df_progresso['cpf_titular'] == cpf]
                ultimo_status = dados_cpf.iloc[0]  # Mais recente
                
                # Contar dependentes
                total_dependentes = len(df_dependentes[df_dependentes['cpf_titular'] == cpf])
                
                resumo_cpfs.append({
                    'CPF_Titular': cpf,
                    'Nome_Titular': ultimo_status['nome_titular'],
                    'Status_Final': ultimo_status['status'],
                    'Etapa_Atual': ultimo_status['etapa_atual'],
                    'Total_Dependentes': total_dependentes,
                    'Ultima_Atualizacao': ultimo_status['timestamp'],
                    'Observacoes': ultimo_status['observacoes']
                })
            
            df_resumo = pd.DataFrame(resumo_cpfs)
            
            # Gerar arquivo Excel
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            nome_arquivo = f"visualizacao_checkpoint_{timestamp}.xlsx"
            
            with pd.ExcelWriter(nome_arquivo, engine='openpyxl') as writer:
                # Aba Resumo
                df_resumo.to_excel(writer, sheet_name='Resumo_CPFs', index=False)
                
                # Aba Progresso Detalhado
                df_progresso.to_excel(writer, sheet_name='Progresso_Detalhado', index=False)
                
                # Aba Dependentes
                df_dependentes.to_excel(writer, sheet_name='Dependentes', index=False)
                
                # Aba Estat√≠sticas
                stats = {
                    'Metrica': [
                        'Total de CPFs',
                        'CPFs com Sucesso',
                        'CPFs Pulados',
                        'CPFs com Erro',
                        'Total de Dependentes'
                    ],
                    'Valor': [
                        len(cpfs_unicos),
                        len(df_resumo[df_resumo['Status_Final'] == 'sucesso']),
                        len(df_resumo[df_resumo['Status_Final'] == 'pulado']),
                        len(df_resumo[df_resumo['Status_Final'] == 'erro']),
                        len(df_dependentes)
                    ]
                }
                df_stats = pd.DataFrame(stats)
                df_stats.to_excel(writer, sheet_name='Estatisticas', index=False)
            
            print(f"‚úÖ Planilha gerada: {nome_arquivo}")
            print(f"üìä {len(cpfs_unicos)} CPFs processados")
            print(f"üìã {len(df_resumo)} registros no resumo")
            
            return nome_arquivo
            
        except Exception as e:
            print(f"‚ùå Erro ao gerar planilha: {e}")
            return None
    
    def tratar_erro_cpf_ja_lancado(self, erros_encontrados):
        """Trata especificamente o erro de CPF j√° lan√ßado"""
        try:
            # Verificar se √© o erro espec√≠fico de CPF j√° lan√ßado
            erro_cpf_ja_lancado = False
            for erro in erros_encontrados:
                if "inclus√£o n√£o permitida" in erro.lower() and "evento ativo" in erro.lower():
                    erro_cpf_ja_lancado = True
                    break
            
            if erro_cpf_ja_lancado:
                print(f"\nüö´ ERRO ESPEC√çFICO DETECTADO:")
                print(f"   CPF {self.cpf_titular_atual} j√° foi lan√ßado para este per√≠odo!")
                print(f"   ‚è≠Ô∏è Pulando para o pr√≥ximo grupo...")
                
                # Salvar checkpoint espec√≠fico para CPF j√° lan√ßado
                self.salvar_checkpoint(
                    self.cpf_titular_atual,
                    self.nome_titular_atual,
                    "cpf_ja_lancado",
                    "pulado",
                    observacoes="CPF j√° foi lan√ßado para este per√≠odo - pulando para pr√≥ximo grupo"
                )
                
                return True
            
            return False
            
        except Exception as e:
            print(f"‚ùå Erro ao tratar CPF j√° lan√ßado: {e}")
            return False
    
    def preencher_dados_iniciais(self, cpf_titular, nome_titular=None):
        """
        Preenche os 3 campos iniciais e clica em Continuar
        
        Args:
            cpf_titular: CPF do titular a ser preenchido
            nome_titular: Nome do titular (opcional)
        """
        print("\nüìù Preenchendo dados iniciais...")
        
        # Definir titular atual para checkpoint
        self.cpf_titular_atual = cpf_titular
        self.nome_titular_atual = nome_titular or "Titular"
        
        # Salvar checkpoint - iniciando preenchimento
        self.salvar_checkpoint(
            cpf_titular, 
            nome_titular, 
            "dados_iniciais", 
            "iniciando",
            observacoes="Iniciando preenchimento dos dados iniciais"
        )
        
        try:
            # DEBUG: Ver estado da p√°gina
            print(f"\nüîç DEBUG:")
            print(f"   URL: {self.driver.current_url}")
            print(f"   T√≠tulo: {self.driver.title}")
            
            # Verificar iframes
            iframes = self.driver.find_elements(By.TAG_NAME, "iframe")
            print(f"   Iframes encontrados: {len(iframes)}")
            
            # Se tiver iframe, entrar nele
            if len(iframes) > 0:
                print(f"   ‚ö†Ô∏è P√ÅGINA TEM IFRAME! Entrando no primeiro iframe...")
                self.driver.switch_to.frame(0)
                print(f"   ‚úÖ Dentro do iframe")
            
            # Aguardar e procurar elemento
            print("   ‚è≥ Aguardando formul√°rio carregar (15s)...")
            
            # Tentar encontrar por m√∫ltiplos m√©todos
            elemento_encontrado = False
            tentativas = [
                ("ID", By.ID, "periodo_apuracao"),
                ("data-testid", By.CSS_SELECTOR, '[data-testid="periodo_apuracao"]'),
                ("placeholder", By.CSS_SELECTOR, 'input[placeholder="MM/AAAA"]'),
            ]
            
            for nome, metodo, seletor in tentativas:
                try:
                    print(f"   Tentando encontrar por {nome}: {seletor}")
                    WebDriverWait(self.driver, TIMEOUT_MODAL).until(
                        EC.presence_of_element_located((metodo, seletor))
                    )
                    print(f"   ‚úÖ Encontrado por {nome}!")
                    elemento_encontrado = True
                    break
                except:
                    print(f"   ‚ùå N√£o encontrado por {nome}")
                    continue
            
            if not elemento_encontrado:
                # Mostrar o que TEM na p√°gina
                print("\n   üìã ELEMENTOS INPUT NA P√ÅGINA:")
                inputs = self.driver.find_elements(By.TAG_NAME, "input")
                print(f"   Total: {len(inputs)}")
                for i, inp in enumerate(inputs[:15]):
                    try:
                        id_attr = inp.get_attribute("id") or "sem-id"
                        testid = inp.get_attribute("data-testid") or "sem-testid"
                        placeholder = inp.get_attribute("placeholder") or "sem-placeholder"
                        print(f"      {i+1}. ID='{id_attr}' | testid='{testid}' | placeholder='{placeholder}'")
                    except:
                        pass
                
                print("\n   ‚ùå FORMUL√ÅRIO N√ÉO ENCONTRADO!")
                print("   ‚ö†Ô∏è Voc√™ pressionou ENTER com os 3 campos VIS√çVEIS na tela?")
                return False
            
            print("   ‚úÖ Formul√°rio detectado!")
            self.delay_humano(0.5, 1.0)
            
            # CAMPO 1: Per√≠odo de Apura√ß√£o
            print("   üìÖ Preenchendo Per√≠odo de Apura√ß√£o...")
            campo_data = self.driver.find_element(By.ID, "periodo_apuracao")
            campo_data.clear()
            self.delay_humano(0.2, 0.5)
            self.digitar_devagar(campo_data, PERIODO_APURACAO)
            print(f"   ‚úÖ Data: {PERIODO_APURACAO}")
            self.delay_humano(0.5, 1.0)
            
            # CAMPO 2: CNPJ
            print("   üè¢ Preenchendo CNPJ...")
            campo_cnpj = self.driver.find_element(By.ID, "insc_estabelecimento")
            campo_cnpj.clear()
            self.delay_humano(0.2, 0.5)
            self.digitar_devagar(campo_cnpj, CNPJ_EMPRESA)
            print(f"   ‚úÖ CNPJ: {CNPJ_EMPRESA}")
            self.delay_humano(0.5, 1.0)
            
            # CAMPO 3: CPF do Benefici√°rio
            print(f"   üë§ Preenchendo CPF do Benefici√°rio...")
            campo_cpf = self.driver.find_element(By.ID, "cpf_beneficiario")
            campo_cpf.clear()
            self.delay_humano(0.2, 0.5)
            self.digitar_devagar(campo_cpf, cpf_titular)
            print(f"   ‚úÖ CPF: {cpf_titular}")
            self.delay_humano(0.8, 1.5)
            
            # BOT√ÉO: Continuar ser√° clicado na fun√ß√£o continuar_para_proxima_etapa()
            print("   üîò Bot√£o 'Continuar' ser√° clicado na pr√≥xima etapa...")
            self.delay_humano(0.5, 1.0)
            
            print("\n‚úÖ Dados iniciais preenchidos com sucesso!")
            return True
            
        except Exception as e:
            print(f"\n‚ùå Erro ao preencher dados iniciais: {e}")
            return False
    
    def verificar_erros_primeira_etapa(self):
        """Verifica se h√° erros na primeira etapa (spans de aviso)"""
        try:
            print("\nüîç Verificando erros na primeira etapa...")
            
            # Procurar por spans de erro/aviso
            spans_erro = self.driver.find_elements(By.XPATH, "//span[contains(@class, 'erro') or contains(@class, 'error') or contains(@class, 'aviso') or contains(@class, 'warning') or contains(@class, 'alert')]")
            
            # Procurar por divs de erro
            divs_erro = self.driver.find_elements(By.XPATH, "//div[contains(@class, 'erro') or contains(@class, 'error') or contains(@class, 'aviso') or contains(@class, 'warning') or contains(@class, 'alert')]")
            
            # Procurar especificamente pelo componente de mensagem de alerta
            mensagens_alerta = self.driver.find_elements(By.XPATH, "//app-reinf-mensagens-alerta//div[@class='message alert']")
            
            # Procurar por elementos com texto de erro comum
            textos_erro = [
                "CPF j√° foi lan√ßado",
                "j√° foi lan√ßado",
                "duplicado",
                "inv√°lido",
                "erro",
                "n√£o encontrado",
                "campo obrigat√≥rio",
                "Inclus√£o n√£o permitida",
                "Existe um evento ativo",
                "CPF do benefici√°rio",
                "mesmo per√≠odo de apura√ß√£o"
            ]
            
            erros_encontrados = []
            
            # Verificar spans
            for span in spans_erro:
                texto = span.text.strip()
                if texto and any(palavra in texto.lower() for palavra in textos_erro):
                    erros_encontrados.append(f"SPAN: {texto}")
            
            # Verificar divs
            for div in divs_erro:
                texto = div.text.strip()
                if texto and any(palavra in texto.lower() for palavra in textos_erro):
                    erros_encontrados.append(f"DIV: {texto}")
            
            # Verificar mensagens de alerta espec√≠ficas
            for mensagem in mensagens_alerta:
                if mensagem.is_displayed():
                    # Procurar pela descri√ß√£o da mensagem
                    try:
                        descricao = mensagem.find_element(By.CSS_SELECTOR, '[data-testid*="mensagem_descricao"]')
                        texto_descricao = descricao.text.strip()
                        if texto_descricao:
                            erros_encontrados.append(f"ALERTA: {texto_descricao}")
                    except:
                        # Se n√£o encontrar a descri√ß√£o, pegar o texto completo da mensagem
                        texto_completo = mensagem.text.strip()
                        if texto_completo and any(palavra in texto_completo.lower() for palavra in textos_erro):
                            erros_encontrados.append(f"ALERTA: {texto_completo}")
            
            # Procurar por elementos com texto de erro espec√≠fico
            for texto_erro in textos_erro:
                elementos = self.driver.find_elements(By.XPATH, f"//*[contains(text(), '{texto_erro}')]")
                for elemento in elementos:
                    if elemento.text.strip() and elemento.is_displayed():
                        erros_encontrados.append(f"TEXTO: {elemento.text.strip()}")
            
            if erros_encontrados:
                # Tratar erro espec√≠fico de CPF j√° lan√ßado
                if self.tratar_erro_cpf_ja_lancado(erros_encontrados):
                    # Se for CPF j√° lan√ßado, n√£o precisa salvar checkpoint adicional
                    return False
                
                # Salvar checkpoint de erro gen√©rico
                self.salvar_checkpoint(
                    self.cpf_titular_atual,
                    self.nome_titular_atual,
                    "erro_primeira_etapa",
                    "erro",
                    observacoes=f"Erros: {'; '.join(erros_encontrados)}"
                )
                return False
            else:
                print("‚úÖ Nenhum erro encontrado na primeira etapa")
                return True
                
        except Exception as e:
            print(f"‚ùå Erro ao verificar erros: {e}")
            return False
    
    def verificar_segunda_etapa_carregou(self):
        """Verifica se a segunda etapa carregou corretamente"""
        try:
            print("\nüîç Verificando se segunda etapa carregou...")
            
            # Aguardar um pouco para a p√°gina processar
            time.sleep(TEMPO_PROCESSAMENTO_PAGINA)
            
            # Verificar se ainda estamos na primeira etapa (campos iniciais ainda vis√≠veis)
            campos_primeira_etapa = [
                (By.ID, "periodo_apuracao"),
                (By.ID, "insc_estabelecimento"),
                (By.ID, "cpf_beneficiario")
            ]
            
            primeira_etapa_ainda_visivel = False
            for metodo, seletor in campos_primeira_etapa:
                try:
                    elemento = self.driver.find_element(metodo, seletor)
                    if elemento.is_displayed():
                        primeira_etapa_ainda_visivel = True
                        break
                except:
                    continue
            
            if primeira_etapa_ainda_visivel:
                print("‚ö†Ô∏è Primeira etapa ainda est√° vis√≠vel - pode ter havido erro")
                return False
            
            # Verificar se elementos da segunda etapa est√£o presentes
            elementos_segunda_etapa = [
                (By.ID, "BotaoInclusaoDiv_ideDep"),  # Bot√£o adicionar dependente
                (By.ID, "BotaoInclusaoDiv_ideOpSaude"),  # Bot√£o adicionar plano
                (By.XPATH, "//button[contains(@id, 'BotaoInclusaoDiv')]")  # Qualquer bot√£o de inclus√£o
            ]
            
            segunda_etapa_carregou = False
            for metodo, seletor in elementos_segunda_etapa:
                try:
                    elemento = self.driver.find_element(metodo, seletor)
                    if elemento.is_displayed():
                        segunda_etapa_carregou = True
                        print(f"‚úÖ Segunda etapa carregou - elemento encontrado: {seletor}")
                        break
                except:
                    continue
            
            if not segunda_etapa_carregou:
                print("‚ùå Segunda etapa n√£o carregou - elementos n√£o encontrados")
                return False
            
            # Verificar se h√° mensagens de sucesso ou confirma√ß√£o
            mensagens_sucesso = self.driver.find_elements(By.XPATH, "//*[contains(text(), 'sucesso') or contains(text(), 'Sucesso') or contains(text(), 'confirmado') or contains(text(), 'Confirmado')]")
            if mensagens_sucesso:
                for msg in mensagens_sucesso:
                    if msg.is_displayed():
                        print(f"‚úÖ Mensagem de sucesso: {msg.text}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao verificar segunda etapa: {e}")
            return False
    
    def continuar_para_proxima_etapa(self):
        """Clica no bot√£o Continuar e verifica se passou para a pr√≥xima etapa"""
        try:
            print("\nüîÑ Continuando para pr√≥xima etapa...")
            
            # Aguardar bot√£o "Continuar" aparecer
            WebDriverWait(self.driver, TIMEOUT_MODAL).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, '[data-testid="botao_continuar"]'))
            )
            
            # Clicar em Continuar
            botao_continuar = self.driver.find_element(By.CSS_SELECTOR, '[data-testid="botao_continuar"]')
            botao_continuar.click()
            print("‚úÖ Clicado em Continuar")
            
            # Aguardar um pouco para a p√°gina processar
            time.sleep(TEMPO_PROCESSAMENTO_PAGINA)
            
            # Verificar se h√° erros na primeira etapa
            if not self.verificar_erros_primeira_etapa():
                print("‚ùå Erros encontrados na primeira etapa - n√£o foi poss√≠vel continuar")
                return False
            
            # Verificar se a segunda etapa carregou
            if not self.verificar_segunda_etapa_carregou():
                print("‚ùå Segunda etapa n√£o carregou corretamente")
                return False
            
            # Salvar checkpoint de sucesso
            self.salvar_checkpoint(
                self.cpf_titular_atual,
                self.nome_titular_atual,
                "segunda_etapa_carregada",
                "sucesso",
                observacoes="Segunda etapa carregada com sucesso"
            )
            
            print("‚úÖ Segunda etapa carregada com sucesso!")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao continuar para pr√≥xima etapa: {e}")
            self.salvar_checkpoint(
                self.cpf_titular_atual,
                self.nome_titular_atual,
                "erro_continuar_etapa",
                "erro",
                observacoes=f"Erro: {str(e)}"
            )
            return False
    
    def adicionar_dependente(self, cpf_dependente, relacao_valor, agregado_outros=None):
        """Adiciona um dependente ao formul√°rio"""
        try:
            # Verificar se CPF √© v√°lido
            if not cpf_dependente or str(cpf_dependente).strip() == '' or str(cpf_dependente).strip().lower() == 'nan':
                print(f"‚ö†Ô∏è Pulando dependente - CPF inv√°lido: {cpf_dependente}")
                return True
            
            print(f"\nüë• Adicionando dependente: {cpf_dependente}")
            
            # Salvar checkpoint - iniciando dependente
            self.salvar_checkpoint(
                self.cpf_titular_atual, 
                self.nome_titular_atual, 
                "adicionando_dependente", 
                "em_andamento",
                observacoes=f"CPF: {cpf_dependente}, Rela√ß√£o: {relacao_valor}"
            )
            
            # Clicar no bot√£o "Adicionar dependente"
            try:
                botao_adicionar = self.driver.find_element(By.ID, "BotaoInclusaoDiv_ideDep")
                botao_adicionar.click()
                print("‚úÖ Modal de dependente aberto")
            except Exception as e:
                print(f"‚ùå Erro ao clicar no bot√£o adicionar dependente: {e}")
                self.salvar_dependente_processado(self.cpf_titular_atual, cpf_dependente, relacao_valor, agregado_outros, "erro")
                return False
            
            # Aguardar modal carregar
            WebDriverWait(self.driver, TIMEOUT_MODAL).until(
                EC.presence_of_element_located((By.ID, "cpf_dependente"))
            )
            
            # Preencher CPF do dependente
            try:
                campo_cpf = self.driver.find_element(By.ID, "cpf_dependente")
                campo_cpf.clear()
                self.digitar_devagar(campo_cpf, cpf_dependente)
                print(f"‚úÖ CPF do dependente preenchido: {cpf_dependente}")
            except Exception as e:
                print(f"‚ùå Erro ao preencher CPF: {e}")
                self.salvar_dependente_processado(self.cpf_titular_atual, cpf_dependente, relacao_valor, agregado_outros, "erro")
                return False
            
            # Selecionar rela√ß√£o de depend√™ncia
            try:
                select_relacao = Select(self.driver.find_element(By.ID, "relacao_dependencia"))
                select_relacao.select_by_value(relacao_valor)
                print(f"‚úÖ Rela√ß√£o selecionada: {relacao_valor}")
            except Exception as e:
                print(f"‚ùå Erro ao selecionar rela√ß√£o: {e}")
                self.salvar_dependente_processado(self.cpf_titular_atual, cpf_dependente, relacao_valor, agregado_outros, "erro")
                return False
            
            # Se for "Agregado/Outros" (valor 99), preencher campo de descri√ß√£o
            if relacao_valor == "99" and agregado_outros:
                try:
                    # Aguardar campo de descri√ß√£o aparecer
                    WebDriverWait(self.driver, TIMEOUT_MODAL).until(
                        EC.presence_of_element_located((By.ID, "descricao_dependencia"))
                    )
                    
                    campo_descricao = self.driver.find_element(By.ID, "descricao_dependencia")
                    campo_descricao.clear()
                    self.digitar_devagar(campo_descricao, agregado_outros)
                    print(f"‚úÖ Descri√ß√£o da depend√™ncia preenchida: {agregado_outros}")
                except Exception as e:
                    print(f"‚ö†Ô∏è Campo de descri√ß√£o n√£o encontrado: {e}")
            elif relacao_valor == "99":
                print("‚ö†Ô∏è Rela√ß√£o √© 'Agregado/Outros' mas n√£o foi fornecida descri√ß√£o")
            
            # Clicar em Salvar
            try:
                botao_salvar = self.driver.find_element(By.CSS_SELECTOR, '[data-testid="botao_salvar_modal_ide_dep"]')
                botao_salvar.click()
                print("‚úÖ Dependente adicionado")
                
                # Aguardar modal fechar
                WebDriverWait(self.driver, TIMEOUT_MODAL).until(
                    EC.invisibility_of_element_located((By.ID, "cpf_dependente"))
                )
                
                # Salvar checkpoint - dependente adicionado com sucesso
                self.salvar_checkpoint(
                    self.cpf_titular_atual, 
                    self.nome_titular_atual, 
                    "dependente_adicionado", 
                    "sucesso",
                    observacoes=f"CPF: {cpf_dependente} adicionado com sucesso"
                )
                
                # Salvar dependente como processado
                self.salvar_dependente_processado(self.cpf_titular_atual, cpf_dependente, relacao_valor, agregado_outros, "sucesso")
                
            except Exception as e:
                print(f"‚ùå Erro ao salvar dependente: {e}")
                self.salvar_dependente_processado(self.cpf_titular_atual, cpf_dependente, relacao_valor, agregado_outros, "erro")
                return False
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao adicionar dependente: {e}")
            self.salvar_dependente_processado(self.cpf_titular_atual, cpf_dependente, relacao_valor, agregado_outros, "erro")
            return False
    
    def adicionar_plano_saude(self, cnpj_operadora, valor_titular):
        """Adiciona um plano de sa√∫de ao formul√°rio"""
        try:
            print(f"\nüè• Adicionando plano de sa√∫de: {cnpj_operadora}")
            
            # Clicar no bot√£o "Adicionar plano de sa√∫de"
            try:
                botao_adicionar = self.driver.find_element(By.ID, "BotaoInclusaoDiv_ideOpSaude")
                botao_adicionar.click()
                print("‚úÖ Modal de plano de sa√∫de aberto")
            except Exception as e:
                print(f"‚ùå Erro ao clicar no bot√£o adicionar plano de sa√∫de: {e}")
                self.salvar_plano_processado(self.cpf_titular_atual, cnpj_operadora, valor_titular, "erro")
                return False
            
            # Aguardar modal carregar
            WebDriverWait(self.driver, TIMEOUT_MODAL).until(
                EC.presence_of_element_located((By.ID, "cnpj_operadora"))
            )
            
            # Preencher CNPJ da operadora
            try:
                campo_cnpj = self.driver.find_element(By.ID, "cnpj_operadora")
                campo_cnpj.clear()
                self.digitar_devagar(campo_cnpj, cnpj_operadora)
                print(f"‚úÖ CNPJ da operadora preenchido: {cnpj_operadora}")
            except Exception as e:
                print(f"‚ùå Erro ao preencher CNPJ: {e}")
                self.salvar_plano_processado(self.cpf_titular_atual, cnpj_operadora, valor_titular, "erro")
                return False
            
            # Preencher valor pago pelo titular
            try:
                campo_valor = self.driver.find_element(By.ID, "valor_saude")
                campo_valor.clear()
                self.digitar_devagar(campo_valor, valor_titular)
                print(f"‚úÖ Valor pago pelo titular preenchido: R$ {valor_titular}")
            except Exception as e:
                print(f"‚ùå Erro ao preencher valor: {e}")
                self.salvar_plano_processado(self.cpf_titular_atual, cnpj_operadora, valor_titular, "erro")
                return False
            
            # Clicar em Salvar
            try:
                botao_salvar = self.driver.find_element(By.CSS_SELECTOR, '[data-testid="botao_salvar_modal_ide_op_saude"]')
                botao_salvar.click()
                print("‚úÖ Plano de sa√∫de adicionado")
                
                # Aguardar modal fechar
                WebDriverWait(self.driver, TIMEOUT_MODAL).until(
                    EC.invisibility_of_element_located((By.ID, "cnpj_operadora"))
                )
                
                # Salvar plano como processado
                self.salvar_plano_processado(self.cpf_titular_atual, cnpj_operadora, valor_titular, "sucesso")
                
            except Exception as e:
                print(f"‚ùå Erro ao salvar plano de sa√∫de: {e}")
                self.salvar_plano_processado(self.cpf_titular_atual, cnpj_operadora, valor_titular, "erro")
                return False
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao adicionar plano de sa√∫de: {e}")
            self.salvar_plano_processado(self.cpf_titular_atual, cnpj_operadora, valor_titular, "erro")
            return False
    
    def adicionar_informacao_dependente(self, cpf_dependente, valor_dependente):
        """Adiciona informa√ß√£o de dependente (valor)"""
        try:
            if not cpf_dependente or str(cpf_dependente).strip() == '' or str(cpf_dependente).strip().lower() == 'nan':
                print(f"‚ö†Ô∏è Pulando informa√ß√£o do dependente - CPF inv√°lido: {cpf_dependente}")
                return True
            
            print(f"\nüí∞ Adicionando informa√ß√£o do dependente: {cpf_dependente}")
            
            # Clicar no bot√£o "Adicionar Informa√ß√µes dos Dependentes"
            try:
                botao_adicionar = self.driver.find_element(By.ID, "BotaoInclusaoDiv_infoDependPl_0")
                botao_adicionar.click()
                print("‚úÖ Modal de informa√ß√µes dos dependentes aberto")
            except Exception as e:
                print(f"‚ùå Erro ao clicar no bot√£o adicionar informa√ß√µes: {e}")
                return False
            
            # Aguardar modal carregar
            WebDriverWait(self.driver, TIMEOUT_MODAL).until(
                EC.presence_of_element_located((By.ID, "c_p_f_do_dependente"))
            )
            
            # Selecionar dependente pelo CPF
            try:
                select_dependente = Select(self.driver.find_element(By.ID, "c_p_f_do_dependente"))
                select_dependente.select_by_value(cpf_dependente)
                print(f"‚úÖ Dependente selecionado: {cpf_dependente}")
            except Exception as e:
                print(f"‚ùå Erro ao selecionar dependente: {e}")
                return False
            
            # Preencher valor pago pelo dependente
            try:
                campo_valor = self.driver.find_element(By.ID, "valor_saude_plano")
                campo_valor.clear()
                self.digitar_devagar(campo_valor, valor_dependente)
                print(f"‚úÖ Valor pago pelo dependente preenchido: R$ {valor_dependente}")
            except Exception as e:
                print(f"‚ùå Erro ao preencher valor: {e}")
                return False
            
            # Clicar em Salvar
            try:
                botao_salvar = self.driver.find_element(By.CSS_SELECTOR, '[data-testid="botao_salvar_modal_info_depend_pl"]')
                botao_salvar.click()
                print("‚úÖ Informa√ß√£o do dependente adicionada")
                
                # Aguardar modal fechar
                WebDriverWait(self.driver, TIMEOUT_MODAL).until(
                    EC.invisibility_of_element_located((By.ID, "c_p_f_do_dependente"))
                )
            except Exception as e:
                print(f"‚ùå Erro ao salvar informa√ß√£o do dependente: {e}")
                return False
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao adicionar informa√ß√£o do dependente: {e}")
            return False
    
    def enviar_declaracao(self):
        """Envia a declara√ß√£o usando o bot√£o 'Concluir e enviar'"""
        try:
            print("üì§ Enviando declara√ß√£o...")
            time.sleep(TEMPO_ANTES_ENVIO)
            wait = WebDriverWait(self.driver, TIMEOUT_WEBDRIVER)
            
            try:
                # Tentar localizar pelo data-testid (preferencial)
                botao_enviar = wait.until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, '[data-testid="botao_concluir_enviar"]'))
                )
                print("‚úÖ Bot√£o encontrado pelo data-testid")
            except:
                # Fallback: tentar localizar pelo texto do bot√£o
                print("‚ö†Ô∏è Tentando localizar pelo texto...")
                botao_enviar = wait.until(
                    EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Concluir e enviar')]"))
                )
                print("‚úÖ Bot√£o encontrado pelo texto")
            
            # Scroll at√© o bot√£o para garantir visibilidade
            self.driver.execute_script("arguments[0].scrollIntoView(true);", botao_enviar)
            time.sleep(TEMPO_APOS_SCROLL)
            
            # Clicar no bot√£o
            print("üñ±Ô∏è Clicando no bot√£o 'Concluir e enviar'...")
            botao_enviar.click()
            
            print("‚úÖ Declara√ß√£o enviada com sucesso!")
            print("‚è≥ Aguardando p√°gina de confirma√ß√£o/assinatura...")
            
            # Aguardar a pr√≥xima p√°gina carregar
            time.sleep(TEMPO_APOS_ENVIO)
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao enviar declara√ß√£o: {e}")
            print("üí° Verifique se o formul√°rio foi totalmente preenchido")
            return False
    
    def aguardar_alerta_sucesso_assinatura(self):
        """Aguarda automaticamente o alerta de sucesso da assinatura eletr√¥nica"""
        try:
            print("‚è≥ Aguardando confirma√ß√£o...")
            
            wait = WebDriverWait(self.driver, TIMEOUT_ALERTA_SUCESSO)
            
            # Tentar detectar alerta de sucesso
            try:
                alerta = wait.until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, '[data-testid="mensagem_descricao_0"]'))
                )
                if "ms7001" in alerta.text.lower() and "evento recebido com sucesso" in alerta.text.lower():
                    print("‚úÖ Assinatura conclu√≠da!")
                    return True
                    
            except:
                try:
                    alerta = wait.until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, 'app-reinf-mensagens-alerta .message.success'))
                    )
                    if alerta.is_displayed():
                        texto_alerta = alerta.text
                        if "ms7001" in texto_alerta.lower() and "evento recebido com sucesso" in texto_alerta.lower():
                            print("‚úÖ Assinatura conclu√≠da!")
                            return True
                        
                except:
                    try:
                        alerta = wait.until(
                            EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'MS7001 - Evento recebido com sucesso')]"))
                        )
                        if alerta.is_displayed():
                            print("‚úÖ Assinatura conclu√≠da!")
                            return True
                        
                    except:
                        componente_mensagem = wait.until(
                            EC.presence_of_element_located((By.TAG_NAME, "app-reinf-mensagens-alerta"))
                        )
                        if componente_mensagem.is_displayed():
                            texto_componente = componente_mensagem.text
                            if "sucesso" in texto_componente.lower() and "ms7001" in texto_componente.lower():
                                print("‚úÖ Assinatura conclu√≠da!")
                                return True
            
            return False
            
        except Exception as e:
            print("‚ö†Ô∏è Confirma√ß√£o n√£o detectada - continuando...")
            return False
    
    def realizar_assinatura_automatica(self, metodo_assinatura=1):
        """
        Realiza assinatura eletr√¥nica automaticamente usando PyAutoGUI.
        
        Este m√©todo √© o core da automa√ß√£o de assinatura, aguardando o aplicativo
        de assinatura (como Assinador Serpro) se estabilizar e executando a
        sequ√™ncia de comandos apropriada.
        
        Fluxo:
        1. Aguarda 15s para aplicativo de assinatura carregar
        2. Executa m√©todo de assinatura selecionado:
           - M√©todo A: Seta ‚Üë, Seta ‚Üë, Enter (recomendado)
           - M√©todo B: Click nas coordenadas + Enter
        3. Retorna sucesso/falha da opera√ß√£o
        
        Args:
            metodo_assinatura (int): M√©todo a usar (1=teclas, 2=mouse)
        
        Returns:
            bool: True se assinatura foi executada com sucesso, False caso contr√°rio
        
        Raises:
            Exception: Capturada e logada, retorna False em caso de erro
        """
        try:
            print("üîê Executando assinatura autom√°tica...")
            
            # Aguardar aplicativo de assinatura
            if not self._aguardar_tempo_fixo(TEMPO_ESPERA_ASSINADOR):
                print("‚ùå Erro durante espera")
                return False
            
            if metodo_assinatura == 1:
                return self._assinatura_metodo_a()
            elif metodo_assinatura == 2:
                return self._assinatura_metodo_b()
            else:
                print("‚ùå M√©todo de assinatura inv√°lido")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro na assinatura autom√°tica: {e}")
            return False
    
    def _aguardar_tempo_fixo(self, tempo_espera=15):
        """
        Aguarda um tempo fixo para o aplicativo de assinatura se estabilizar
        
        Args:
            tempo_espera (int): Tempo em segundos para aguardar
        """
        try:
            print(f"‚è≥ Aguardando {tempo_espera}s...")
            time.sleep(tempo_espera)
            return True
            
        except Exception as e:
            return True  # Continuar mesmo com erro
    
    def _assinatura_metodo_a(self):
        """M√©todo A de assinatura - 3 teclas: Seta ‚Üë, Seta ‚Üë, Enter"""
        try:
            print("‚å®Ô∏è M√©todo A: ‚Üë ‚Üë Enter")
            
            pyautogui.press('up')
            time.sleep(ASSINATURA_METODO_A_INTERVALO)
            pyautogui.press('up')
            time.sleep(ASSINATURA_METODO_A_INTERVALO)
            pyautogui.press('enter')
            time.sleep(TEMPO_ESPERA_CLIQUE)
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro no M√©todo A: {e}")
            return False
    
    def _assinatura_metodo_b(self):
        """M√©todo B de assinatura - Click do mouse + Enter"""
        try:
            if not self.coordenadas_mouse_metodo_b:
                print("‚ùå Coordenadas n√£o configuradas")
                return False
            
            x, y = self.coordenadas_mouse_metodo_b
            print(f"üñ±Ô∏è M√©todo B: Click ({x},{y}) + Enter")
            
            pyautogui.click(x, y)
            time.sleep(ASSINATURA_METODO_B_INTERVALO)
            pyautogui.press('enter')
            time.sleep(TEMPO_ESPERA_CLIQUE)
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro no M√©todo B: {e}")
            return False
    
    def configurar_coordenadas_metodo_b(self):
        """Configura coordenadas do mouse para M√©todo B de forma interativa"""
        try:
            print("\nüéØ CONFIGURA√á√ÉO DE COORDENADAS - M√âTODO B")
            print("="*50)
            print("Para o M√©todo B, voc√™ precisa definir onde clicar na tela.")
            print("Op√ß√µes dispon√≠veis:")
            print("1Ô∏è‚É£ - Detectar posi√ß√£o atual do mouse")
            print("2Ô∏è‚É£ - Inserir coordenadas manualmente") 
            print("3Ô∏è‚É£ - Usar coordenadas salvas anteriormente")
            
            opcao = input("\nEscolha uma op√ß√£o (1, 2 ou 3): ").strip()
            
            if opcao == "1":
                return self._detectar_posicao_mouse()
            elif opcao == "2":
                return self._inserir_coordenadas_manual()
            elif opcao == "3":
                return self._usar_coordenadas_salvas()
            else:
                print("‚ùå Op√ß√£o inv√°lida! Digite apenas 1, 2 ou 3")
                print("üí° Tente novamente com uma op√ß√£o v√°lida")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro ao configurar coordenadas: {e}")
            return False
    
    def _detectar_posicao_mouse(self):
        """Verifica se h√° janelas modais ou popups abertos"""
        try:
            # Verificar modais comuns
            modal_selectors = [
                '.modal',
                '.popup',
                '.dialog',
                '[role="dialog"]',
                '[class*="modal"]',
                '[class*="popup"]',
                '.ui-dialog'
            ]
            
            for selector in modal_selectors:
                try:
                    elementos = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    if elementos:
                        for elemento in elementos:
                            if elemento.is_displayed():
                                print(f"ü™ü Modal detectado: {selector}")
                                return True
                except:
                    continue
            
            return False
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao verificar janelas modais: {e}")
            return False
    
    def _verificar_foco_navegador(self):
        """Verifica se o navegador est√° em foco e tenta coloc√°-lo em foco se necess√°rio"""
        try:
            print("üéØ Verificando foco do navegador...")
            
            # Tentar colocar o navegador em foco clicando nele
            try:
                # Pegar o t√≠tulo da janela atual do driver
                titulo_janela = self.driver.title
                print(f"üìã T√≠tulo da janela: {titulo_janela}")
                
                # Maximizar a janela para garantir que esteja vis√≠vel
                self.driver.maximize_window()
                
                # Dar foco √† janela do navegador
                self.driver.switch_to.window(self.driver.current_window_handle)
                
                print("‚úÖ Foco do navegador verificado e ajustado")
                return True
                
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao ajustar foco do navegador: {e}")
                print("üí° Continuando sem ajuste de foco...")
                return True
                
        except Exception as e:
            print(f"‚ùå Erro na verifica√ß√£o de foco: {e}")
            return True  # Continuar mesmo com erro
    
    def _assinatura_metodo_a(self):
        """M√©todo A de assinatura - 3 teclas: Seta ‚Üë, Seta ‚Üë, Enter"""
        try:
            print("üîê Executando M√©todo A de assinatura...")
            print("üìù Sequ√™ncia: Seta ‚Üë ‚Üí Seta ‚Üë ‚Üí Enter")
            
            # A p√°gina j√° foi verificada, pode executar diretamente
            
            # Sequ√™ncia espec√≠fica do M√©todo A
            print("1Ô∏è‚É£ Pressionando Seta para Cima...")
            pyautogui.press('up')
            time.sleep(TESTE_METODO_A_INTERVALO)
            
            print("2Ô∏è‚É£ Pressionando Seta para Cima...")
            pyautogui.press('up')
            time.sleep(TESTE_METODO_A_INTERVALO)
            
            print("3Ô∏è‚É£ Pressionando Enter...")
            pyautogui.press('enter')
            time.sleep(TESTE_METODO_B_INTERVALO_FINAL)
            
            print("‚úÖ M√©todo A conclu√≠do - sequ√™ncia de teclas executada")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro no M√©todo A: {e}")
            return False
    
    def _assinatura_metodo_b(self):
        """M√©todo B de assinatura - Click do mouse + Enter"""
        try:
            print("üîê Executando M√©todo B de assinatura...")
            print("üìù Sequ√™ncia: Click do Mouse ‚Üí Enter")
            
            # Verificar se coordenadas foram configuradas
            if not self.coordenadas_mouse_metodo_b:
                print("‚ùå Coordenadas do mouse n√£o configuradas para M√©todo B")
                print("üí° Configure as coordenadas antes de executar")
                return False
            
            x, y = self.coordenadas_mouse_metodo_b
            print(f"üéØ Coordenadas configuradas: ({x}, {y})")
            
            # A p√°gina j√° foi verificada, pode executar diretamente
            
            # Sequ√™ncia espec√≠fica do M√©todo B
            print("1Ô∏è‚É£ Clicando do mouse na posi√ß√£o configurada...")
            pyautogui.click(x, y)
            time.sleep(TESTE_METODO_B_INTERVALO_CLICK)
            
            print("2Ô∏è‚É£ Pressionando Enter...")
            pyautogui.press('enter')
            time.sleep(TESTE_METODO_B_INTERVALO_FINAL)
            
            print("‚úÖ M√©todo B conclu√≠do - click do mouse + Enter executados")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro no M√©todo B: {e}")
            return False
    
    def configurar_coordenadas_metodo_b(self):
        """Configura coordenadas do mouse para M√©todo B de forma interativa"""
        try:
            print("\nüéØ CONFIGURA√á√ÉO DE COORDENADAS - M√âTODO B")
            print("="*50)
            print("Para o M√©todo B, voc√™ precisa definir onde clicar na tela.")
            print("Op√ß√µes dispon√≠veis:")
            print("1Ô∏è‚É£ - Detectar posi√ß√£o atual do mouse")
            print("2Ô∏è‚É£ - Inserir coordenadas manualmente") 
            print("3Ô∏è‚É£ - Usar coordenadas salvas anteriormente")
            
            opcao = input("\nEscolha uma op√ß√£o (1, 2 ou 3): ").strip()
            
            if opcao == "1":
                return self._detectar_posicao_mouse()
            elif opcao == "2":
                return self._inserir_coordenadas_manual()
            elif opcao == "3":
                return self._usar_coordenadas_salvas()
            else:
                print("‚ùå Op√ß√£o inv√°lida! Digite apenas 1, 2 ou 3")
                print("üí° Tente novamente com uma op√ß√£o v√°lida")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro ao configurar coordenadas: {e}")
            return False
    
    def _detectar_posicao_mouse(self):
        """Detecta a posi√ß√£o atual do mouse para usar como coordenadas"""
        try:
            print("\nüñ±Ô∏è DETEC√á√ÉO DE POSI√á√ÉO DO MOUSE")
            print("="*40)
            print("1. Posicione o mouse EXATAMENTE onde deve clicar")
            print("2. Pressione ENTER quando estiver na posi√ß√£o correta")
            print("3. ‚ö†Ô∏è N√ÉO mova o mouse ap√≥s pressionar ENTER!")
            
            input("\nPositione o mouse e pressione ENTER...")
            
            # Capturar posi√ß√£o atual
            x, y = pyautogui.position()
            coordenadas = (x, y)
            self.coordenadas_mouse_metodo_b = coordenadas
            
            # Salvar no config.py
            self.salvar_coordenadas_config(coordenadas)
            
            print(f"‚úÖ Coordenadas capturadas: ({x}, {y})")
            print("üíæ Coordenadas salvas para o M√©todo B")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao detectar posi√ß√£o: {e}")
            return False
    
    def _inserir_coordenadas_manual(self):
        """Permite inserir coordenadas manualmente"""
        try:
            print(f"\n‚å®Ô∏è INSER√á√ÉO MANUAL DE COORDENADAS")
            print("="*40)
            print(f"üìè Resolu√ß√£o da sua tela: {pyautogui.size()}")
            
            while True:
                try:
                    x = int(input("Digite a coordenada X (horizontal): "))
                    y = int(input("Digite a coordenada Y (vertical): "))
                    
                    # Validar coordenadas
                    largura, altura = pyautogui.size()
                    if 0 <= x <= largura and 0 <= y <= altura:
                        coordenadas = (x, y)
                        self.coordenadas_mouse_metodo_b = coordenadas
                        
                        # Salvar no config.py
                        self.salvar_coordenadas_config(coordenadas)
                        
                        print(f"‚úÖ Coordenadas definidas: ({x}, {y})")
                        return True
                    else:
                        print(f"‚ùå Coordenadas inv√°lidas! Use: X (0-{largura}), Y (0-{altura})")
                        
                except ValueError:
                    print("‚ùå Digite apenas n√∫meros inteiros")
                    
        except Exception as e:
            print(f"‚ùå Erro ao inserir coordenadas: {e}")
            return False
    
    def _usar_coordenadas_salvas(self):
        """Usa coordenadas previamente salvas do config.py"""
        # Recarregar coordenadas do config.py para pegar valores atualizados
        try:
            from config import COORDENADAS_MOUSE_METODO_B
            self.coordenadas_mouse_metodo_b = COORDENADAS_MOUSE_METODO_B
        except ImportError:
            pass
        
        if self.coordenadas_mouse_metodo_b:
            x, y = self.coordenadas_mouse_metodo_b
            print(f"‚úÖ Usando coordenadas salvas do config.py: ({x}, {y})")
            return True
        else:
            print("‚ùå Nenhuma coordenada salva encontrada no config.py")
            print("üí° Voc√™ precisa configurar as coordenadas primeiro")
            print("üí° Escolha op√ß√£o 1 (detectar posi√ß√£o) ou 2 (inserir manual)")
            return False
    
    def detectar_elementos_tela(self):
        """Detecta elementos na tela para auxiliar na assinatura"""
        try:
            print("üîç Detectando elementos na tela...")
            
            # Obter tamanho da tela
            largura_tela, altura_tela = pyautogui.size()
            print(f"üìè Resolu√ß√£o da tela: {largura_tela}x{altura_tela}")
            
            # Capturar screenshot da tela atual
            screenshot = pyautogui.screenshot()
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            nome_screenshot = f"screenshot_assinatura_{timestamp}.png"
            screenshot.save(nome_screenshot)
            print(f"üì∏ Screenshot salvo: {nome_screenshot}")
            
            return {
                'largura': largura_tela,
                'altura': altura_tela,
                'screenshot': nome_screenshot
            }
            
        except Exception as e:
            print(f"‚ùå Erro ao detectar elementos: {e}")
            return None
    
    def clicar_proximo_cpf(self):
        """Clica no bot√£o 'Incluir novo pagamento' para ir ao pr√≥ximo CPF"""
        try:
            print("‚û°Ô∏è Pr√≥ximo CPF...")
            time.sleep(TEMPO_ANTES_PROXIMO_CPF)
            wait = WebDriverWait(self.driver, TIMEOUT_PROXIMO_CPF)
            
            try:
                # M√©todo 1: Tentar localizar pelo texto exato
                botao_proximo = wait.until(
                    EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Incluir novo pagamento')]"))
                )
                print("‚úÖ Bot√£o encontrado pelo texto")
            except:
                try:
                    # M√©todo 2: Tentar localizar pela classe + texto
                    print("‚ö†Ô∏è Tentando localizar pela classe e texto...")
                    botao_proximo = wait.until(
                        EC.element_to_be_clickable((By.XPATH, "//button[@class='button' and contains(text(), 'Incluir novo pagamento')]"))
                    )
                    print("‚úÖ Bot√£o encontrado pela classe + texto")
                except:
                    # M√©todo 3: Tentar localizar apenas pela classe e verificar texto
                    print("‚ö†Ô∏è Tentando localizar apenas pela classe...")
                    botoes = self.driver.find_elements(By.CSS_SELECTOR, "button.button")
                    botao_proximo = None
                    
                    for botao in botoes:
                        if "incluir novo pagamento" in botao.text.lower():
                            botao_proximo = botao
                            break
                    
                    if botao_proximo:
                        print("‚úÖ Bot√£o encontrado pela classe com verifica√ß√£o de texto")
                    else:
                        raise Exception("Bot√£o n√£o encontrado por nenhum m√©todo")
            
            # Scroll at√© o bot√£o para garantir visibilidade
            print("üìú Fazendo scroll at√© o bot√£o...")
            self.driver.execute_script("arguments[0].scrollIntoView(true);", botao_proximo)
            time.sleep(TEMPO_APOS_SCROLL)
            
            # Clicar no bot√£o
            print("üñ±Ô∏è Clicando no bot√£o 'Incluir novo pagamento'...")
            botao_proximo.click()
            
            print("‚úÖ Bot√£o 'Incluir novo pagamento' clicado com sucesso!")
            print("‚è≥ Aguardando redirecionamento para pr√≥ximo formul√°rio...")
            
            # Aguardar a pr√≥xima p√°gina carregar
            time.sleep(TEMPO_APOS_PROXIMO_CPF)
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao clicar no bot√£o pr√≥ximo CPF: {e}")
            print("üí° Verifique se a assinatura eletr√¥nica foi completada corretamente")
            print("üí° O bot√£o 'Incluir novo pagamento' pode demorar alguns segundos para aparecer")
            return False
    
    def preencher_formulario(self, cpf_titular):
        """Preenche o formul√°rio automaticamente"""
        print("\n" + "="*60)
        print("ü§ñ INICIANDO PREENCHIMENTO AUTOM√ÅTICO")
        print("="*60)
        
        # ETAPA 1: Preencher dados iniciais
        if not self.preencher_dados_iniciais(cpf_titular):
            print("‚ùå Falha no preenchimento inicial")
            return False
        
        # ETAPA 2: Continuar para pr√≥xima etapa
        if not self.continuar_para_proxima_etapa():
            print("‚ùå Falha ao continuar para pr√≥xima etapa")
            return False
        
        # ETAPA 3: Aguardar instru√ß√µes para pr√≥ximos elementos
        print("\n‚úÖ Primeira etapa conclu√≠da!")
        print("\n‚è∏Ô∏è Aguardando pr√≥ximas instru√ß√µes...")
        print("Me diga o que aparece na tela DEPOIS de clicar em 'Continuar'!")
        
        return True
    
    def carregar_dados(self):
        """Carrega dados do Excel"""
        print("\nüìÇ Carregando dados do Excel...")
        try:
            dados = pd.read_excel(ARQUIVO_EXCEL, sheet_name=PLANILHA, skiprows=1)
            dados_limpos = dados.dropna(how='all')
            dados_limpos = dados_limpos[dados_limpos['CPF'].notna()]
            
            # Pegar primeiro titular
            titular = dados_limpos[dados_limpos['DEPENDENCIA'] == 'Titular'].iloc[0]
            
            print(f"‚úÖ Dados carregados!")
            print(f"\nüë§ TITULAR: {titular['NOME']}")
            print(f"   CPF: {titular['CPF']}")
            
            return titular['CPF']
        except Exception as e:
            print(f"‚ùå Erro ao carregar Excel: {e}")
            return None
    
    def processar_dataframe_por_grupos(self):
        """Processa o dataframe agrupando por titular"""
        try:
            print("\nüìä Processando dados do Excel por grupos...")
            dados = pd.read_excel(ARQUIVO_EXCEL, sheet_name=PLANILHA, skiprows=1)
            dados_limpos = dados.dropna(how='all')
            dados_limpos = dados_limpos[dados_limpos['CPF'].notna()]
            
            # Agrupar por titular
            grupos = []
            grupo_atual = []
            
            for index, row in dados_limpos.iterrows():
                if pd.isna(row['NOME']) or str(row['NOME']).strip() == '':
                    continue
                if pd.isna(row['DEPENDENCIA']) or str(row['DEPENDENCIA']).strip() == '':
                    continue
                if pd.isna(row['CPF']) or str(row['CPF']).strip() == '':
                    continue
                
                dependencia = str(row['DEPENDENCIA']).strip().upper()
                
                # Se for TITULAR, finaliza o grupo anterior e inicia um novo
                if dependencia == 'TITULAR':
                    if grupo_atual:  # Se h√° um grupo anterior, adiciona √† lista
                        grupos.append(grupo_atual)
                    grupo_atual = [row]  # Inicia novo grupo com o titular
                else:
                    # Se n√£o for titular, adiciona como dependente ao grupo atual
                    if grupo_atual:  # S√≥ adiciona se h√° um grupo ativo
                        grupo_atual.append(row)
            
            # Adiciona o √∫ltimo grupo se existir
            if grupo_atual:
                grupos.append(grupo_atual)
            
            print(f"‚úÖ {len(grupos)} grupos (titulares) encontrados")
            return grupos
            
        except Exception as e:
            print(f"‚ùå Erro ao processar dataframe: {e}")
            return []
    
    def salvar_checkpoint_indice(self, indice_grupo):
        """Salva o checkpoint do √∫ltimo grupo processado"""
        try:
            conn = sqlite3.connect(BANCO_DADOS)
            cursor = conn.cursor()
            
            # Criar tabela de checkpoint de √≠ndice se n√£o existir
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS checkpoint_indice (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    ultimo_indice INTEGER NOT NULL,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # Inserir ou atualizar checkpoint
            cursor.execute('DELETE FROM checkpoint_indice')
            cursor.execute('INSERT INTO checkpoint_indice (ultimo_indice) VALUES (?)', (indice_grupo,))
            
            conn.commit()
            conn.close()
            print(f"üíæ Checkpoint de √≠ndice salvo: grupo {indice_grupo}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao salvar checkpoint de √≠ndice: {e}")
    
    def carregar_checkpoint_indice(self):
        """Carrega o checkpoint do √∫ltimo grupo processado"""
        try:
            conn = sqlite3.connect(BANCO_DADOS)
            cursor = conn.cursor()
            
            cursor.execute('SELECT ultimo_indice FROM checkpoint_indice ORDER BY timestamp DESC LIMIT 1')
            resultado = cursor.fetchone()
            
            conn.close()
            
            if resultado:
                indice = resultado[0]
                print(f"üìÇ Checkpoint de √≠ndice encontrado: grupo {indice}")
                return indice
            else:
                print("üìÇ Nenhum checkpoint de √≠ndice encontrado")
                return -1
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao carregar checkpoint de √≠ndice: {e}")
            return -1
    
    def processar_todos_os_grupos(self):
        """Processa todos os grupos, pulando automaticamente em caso de erro"""
        try:
            print("\n" + "="*60)
            print("ü§ñ PROCESSANDO TODOS OS GRUPOS")
            print("="*60)
            
            # Carregar grupos
            grupos = self.processar_dataframe_por_grupos()
            if not grupos:
                print("‚ùå Nenhum grupo encontrado")
                return
            
            print(f"üìä Total de grupos: {len(grupos)}")
            
            # Verificar checkpoint de √≠ndice
            checkpoint_indice = self.carregar_checkpoint_indice()
            inicio = 0
            
            if checkpoint_indice >= 0:
                print(f"üîÑ Checkpoint encontrado no grupo {checkpoint_indice + 1}")
                print("üí° Continuando de onde parou...")
                inicio = checkpoint_indice + 1
            
            # Verificar se j√° terminou
            if inicio >= len(grupos):
                print("‚úÖ Todos os grupos j√° foram processados!")
                return
            
            print(f"üìä Processando grupos {inicio + 1} at√© {len(grupos)}")
            
            sucessos = 0
            erros = 0
            pulados = 0
            
            for i in range(inicio, len(grupos)):
                grupo = grupos[i]
                print(f"\n{'='*60}")
                print(f"üîÑ Processando grupo {i+1}/{len(grupos)}")
                
                titular = grupo[0]  # Primeiro item √© sempre o titular
                dependentes = grupo[1:] if len(grupo) > 1 else []
                
                print(f"üë§ Titular: {titular['NOME']} - CPF: {titular['CPF']}")
                print(f"üë• Dependentes: {len(dependentes)}")
                
                # Verificar se grupo j√° foi completamente processado ANTES de tentar processar
                cpf_titular = titular['CPF'] 
                if self.verificar_grupo_completamente_processado(cpf_titular):
                    print(f"‚úÖ Grupo {cpf_titular} j√° foi completamente processado - pulando")
                    sucessos += 1
                    continue
                
                # Verificar se grupo foi pulado (ex: CPF j√° lan√ßado)
                if self.verificar_ultimo_status_pulado(cpf_titular):
                    print(f"‚è≠Ô∏è Grupo {cpf_titular} foi pulado anteriormente - pulando")
                    sucessos += 1
                    continue
                
                # Tentar processar este grupo
                try:
                    resultado = self.processar_grupo_individual(titular, dependentes)
                    
                    if resultado == "sucesso":
                        sucessos += 1
                        print(f"‚úÖ Grupo {i+1} processado com sucesso!")
                        # Salvar checkpoint ap√≥s sucesso
                        self.salvar_checkpoint_indice(i)
                    elif resultado == "pulado":
                        pulados += 1
                        print(f"‚è≠Ô∏è Grupo {i+1} pulado (CPF j√° lan√ßado)")
                        # Salvar checkpoint mesmo quando pulado
                        self.salvar_checkpoint_indice(i)
                    else:
                        erros += 1
                        print(f"‚ùå Grupo {i+1} falhou")
                        
                        # Salvar checkpoint com status "erro" na tabela progresso_efd
                        cpf_titular = titular['CPF']
                        nome_titular = titular['NOME']
                        self.salvar_checkpoint(
                            cpf_titular,
                            nome_titular,
                            "grupo_erro",
                            "erro",
                            observacoes=f"Grupo falhou durante processamento"
                        )
                        
                        # Salvar checkpoint do grupo atual para reprocessar
                        self.salvar_checkpoint_indice(i)
                        
                except Exception as e:
                    # Capturar erros n√£o tratados (ex: erros do Chrome/Selenium)
                    erros += 1
                    print(f"‚ùå Erro n√£o tratado ao processar grupo {i+1}: {e}")
                    traceback.print_exc()
                    
                    # Salvar checkpoint com status "erro"
                    cpf_titular = titular['CPF']
                    nome_titular = titular['NOME']
                    self.salvar_checkpoint(
                        cpf_titular,
                        nome_titular,
                        "grupo_erro",
                        "erro",
                        observacoes=f"Erro n√£o tratado durante processamento: {str(e)}"
                    )
                    
                    # Salvar checkpoint do grupo atual para reprocessar
                    self.salvar_checkpoint_indice(i)
                
                # Pequena pausa entre grupos
                time.sleep(TEMPO_ENTRE_GRUPOS)
            
            # Resumo final
            print(f"\n{'='*60}")
            print("üìä RESUMO FINAL")
            print(f"{'='*60}")
            print(f"Total de grupos: {len(grupos)}")
            print(f"‚úÖ Sucessos: {sucessos}")
            print(f"‚è≠Ô∏è Pulados: {pulados}")
            print(f"‚ùå Erros: {erros}")
            print(f"{'='*60}")
            
        except Exception as e:
            print(f"‚ùå Erro ao processar grupos: {e}")
    
    def processar_grupo_individual(self, titular, dependentes):
        """
        Processa um grupo completo (titular + dependentes) com automa√ß√£o total.
        
        Esta fun√ß√£o gerencia o processo completo de um CPF, incluindo:
        1. Preenchimento autom√°tico dos dados do titular
        2. Adi√ß√£o de todos os dependentes e planos
        3. Envio autom√°tico da declara√ß√£o
        4. Assinatura eletr√¥nica automatizada
        5. Detec√ß√£o de confirma√ß√£o de sucesso
        6. Navega√ß√£o para pr√≥ximo CPF
        7. Salvamento de checkpoints em cada etapa
        
        Args:
            titular (pandas.Series): Dados do titular (primeira linha do grupo)
            dependentes (pandas.DataFrame): DataFrame com todos os dependentes do grupo
        
        Returns:
            bool: True se grupo foi processado com sucesso, False em caso de erro
        
        O m√©todo implementa verifica√ß√£o manual opcional e tratamento robusto de erros,
        salvando checkpoints detalhados para permitir retomada em caso de falha.
        
        Checkpoints salvos:
        - dados_preenchidos: Ap√≥s preencher formul√°rio
        - declaracao_enviada: Ap√≥s envio bem-sucedido
        - assinatura_completa: Ap√≥s assinatura confirmada
        - grupo_completo: Ap√≥s assinatura confirmada
        - erro_*: Em caso de falhas espec√≠ficas
        """
        try:
            cpf_titular = titular['CPF']
            nome_titular = titular['NOME']
            
            # Verificar se o valor do titular √© zero ou nulo - se for, pular o grupo inteiro
            valor_titular_raw = titular.get('VALOR_PLANO') or titular.get('TOTAL')
            
            # Se n√£o houver valor, considerar como nulo (pular grupo)
            if valor_titular_raw is None or self.valor_eh_zero_ou_nulo(valor_titular_raw):
                print(f"\n{'='*60}")
                print(f"‚è≠Ô∏è GRUPO PULADO - VALOR DO TITULAR √â ZERO OU NULO")
                print(f"{'='*60}")
                print(f"üë§ Titular: {nome_titular} - CPF: {cpf_titular}")
                print(f"üí∞ Valor do plano: {valor_titular_raw if valor_titular_raw is not None else 'N/A'}")
                print(f"‚ÑπÔ∏è Grupo inteiro ser√° pulado (titular n√£o assina mais o plano ou valor n√£o informado)")
                
                # Salvar checkpoint com status "pulado"
                self.salvar_checkpoint(
                    cpf_titular,
                    nome_titular,
                    "grupo_pulado",
                    "pulado",
                    observacoes=f"Grupo pulado - valor do titular √© zero ou nulo (n√£o assina mais o plano)"
                )
                
                return "pulado"
            
            # Se h√° dados parciais (grupo incompleto), limpar tudo
            print(f"üîç Verificando dados parciais para {cpf_titular}...")
            
            # Verificar se h√° dependentes ou planos salvos (dados parciais)
            conn = sqlite3.connect(BANCO_DADOS)
            cursor = conn.cursor()
            
            cursor.execute('SELECT COUNT(*) FROM dependentes_processados WHERE cpf_titular = ?', (cpf_titular,))
            dependentes_parciais = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM planos_processados WHERE cpf_titular = ?', (cpf_titular,))
            planos_parciais = cursor.fetchone()[0]
            
            conn.close()
            
            if dependentes_parciais > 0 or planos_parciais > 0:
                print(f"üßπ Encontrados dados parciais para {cpf_titular} - limpando para recome√ßar...")
                self.limpar_dados_parciais_grupo(cpf_titular)
            
            # Preencher dados iniciais
            if not self.preencher_dados_iniciais(cpf_titular, nome_titular):
                print(f"‚ùå Falha no preenchimento inicial para {cpf_titular}")
                self.limpar_dados_parciais_grupo(cpf_titular)
                return "erro"
            
            # Continuar para pr√≥xima etapa
            if not self.continuar_para_proxima_etapa():
                print(f"‚ùå Falha ao continuar para pr√≥xima etapa para {cpf_titular}")
                
                # Verificar se foi erro de "CPF j√° lan√ßado" (status pulado)
                if self.verificar_ultimo_status_pulado(cpf_titular):
                    print(f"‚è≠Ô∏è CPF {cpf_titular} foi pulado (j√° lan√ßado) - mantendo dados salvos")
                    return "pulado"
                else:
                    # Erro real - limpar dados parciais
                    self.limpar_dados_parciais_grupo(cpf_titular)
                    return "erro"
            
            # Processar dependentes
            self.processar_dependentes_grupo(dependentes)
            
            # Processar planos de sa√∫de
            self.processar_planos_grupo(titular)
            
            # Processar informa√ß√µes dos dependentes (valores pagos pelos dependentes)
            self.processar_info_dependentes_grupo(dependentes)
            
            # VERIFICA√á√ÉO CONDICIONAL DOS DADOS
            if self.verificar_dados_manual:
                # PAUSA PARA AN√ÅLISE - Verificar se tudo est√° correto
                print(f"\n{'='*60}")
                print("‚è∏Ô∏è PAUSA PARA AN√ÅLISE")
                print(f"{'='*60}")
                print("üìã Verifique se todos os dados foram preenchidos corretamente:")
                print("   ‚úÖ Dados iniciais (Per√≠odo, CNPJ, CPF)")
                print("   ‚úÖ Dependentes (se houver)")
                print("   ‚úÖ Planos de sa√∫de (se houver)")
                print("   ‚úÖ Informa√ß√µes dos dependentes (se houver)")
                print("\nüí° Ap√≥s verificar, pressione ENTER para continuar...")
                print("   (Ou Ctrl+C para interromper)")
                
                try:
                    input("\n‚è∏Ô∏è Pressione ENTER para continuar ou Ctrl+C para interromper...")
                except (EOFError, KeyboardInterrupt):
                    print(f"\n‚ö†Ô∏è Executando via script - aguardando {TEMPO_SCRIPT_VERIFICACAO}s...")
                    time.sleep(TEMPO_SCRIPT_VERIFICACAO)
            else:
                # Modo autom√°tico - sem verifica√ß√£o manual
                print(f"\n{'='*60}")
                print("üöÄ MODO AUTOM√ÅTICO ATIVADO")
                print(f"{'='*60}")
                print("‚ö° Prosseguindo automaticamente para envio da declara√ß√£o...")
                print("   ‚úÖ Dados iniciais processados")
                print("   ‚úÖ Dependentes processados (se houver)")
                print("   ‚úÖ Planos de sa√∫de processados (se houver)")
                print("   ‚úÖ Informa√ß√µes dos dependentes processadas (se houver)")
                print(f"\n‚è≥ Aguardando {TEMPO_MODO_AUTOMATICO}s antes do envio...")
                time.sleep(TEMPO_MODO_AUTOMATICO)
            
            # ETAPA FINAL: Enviar declara√ß√£o
            print(f"\n{'='*60}")
            print("üì§ ENVIANDO DECLARA√á√ÉO")
            print(f"{'='*60}")
            
            if self.enviar_declaracao():
                print("‚úÖ Declara√ß√£o enviada com sucesso!")
                
                # Executar assinatura eletr√¥nica autom√°tica
                assinatura_sucesso = self.realizar_assinatura_automatica(self.metodo_assinatura)
                
                if assinatura_sucesso:
                    # Aguardar automaticamente pelo alerta de sucesso
                    if self.aguardar_alerta_sucesso_assinatura():
                        print("‚úÖ Processo conclu√≠do!")
                        
                        # GRUPO COMPLETO! Salvar checkpoint final imediatamente ap√≥s assinatura
                        self.salvar_checkpoint(
                            cpf_titular,
                            nome_titular,
                            "grupo_completo",
                            "sucesso",
                            observacoes="Grupo processado completamente - assinatura conclu√≠da com sucesso"
                        )
                        
                    else:
                        print("‚ö†Ô∏è Confirma√ß√£o n√£o detectada - continuando...")
                        time.sleep(TEMPO_CONFIRMACAO_NAO_DETECTADA)
                        
                        # Mesmo sem confirma√ß√£o detectada, consideramos grupo completo se chegou at√© aqui
                        self.salvar_checkpoint(
                            cpf_titular,
                            nome_titular,
                            "grupo_completo",
                            "sucesso",
                            observacoes="Grupo processado completamente - confirma√ß√£o n√£o detectada mas assinatura executada"
                        )
                        
                else:
                    print("‚ùå Erro na assinatura")
                    time.sleep(TEMPO_ERRO_ASSINATURA)
                
                # Salvar checkpoint com assinatura completa (para hist√≥rico)
                self.salvar_checkpoint(
                    cpf_titular,
                    nome_titular,
                    "assinatura_completa",
                    "sucesso",
                    observacoes="Declara√ß√£o enviada e assinatura eletr√¥nica executada"
                )
                
                # Pr√≥ximo passo: clicar no bot√£o pr√≥ximo CPF
                print(f"\n{'='*60}")
                print("‚û°Ô∏è PR√ìXIMO CPF")
                print(f"{'='*60}")
                
                if self.clicar_proximo_cpf():
                    print("‚úÖ Bot√£o pr√≥ximo CPF clicado com sucesso!")
                    return "sucesso"
                else:
                    print("‚ùå Erro ao clicar no bot√£o pr√≥ximo CPF")
                    
                    # Salvar checkpoint com erro no pr√≥ximo CPF
                    self.salvar_checkpoint(
                        cpf_titular,
                        nome_titular,
                        "erro_proximo_cpf",
                        "erro",
                        observacoes="Erro ao clicar no bot√£o pr√≥ximo CPF - verificar manualmente"
                    )
                    
                    self.limpar_dados_parciais_grupo(cpf_titular)
                    return "erro"
            else:
                print("‚ùå Falha ao enviar declara√ß√£o")
                
                # Salvar checkpoint com erro no envio
                self.salvar_checkpoint(
                    cpf_titular,
                    nome_titular,
                    "erro_envio",
                    "erro",
                    observacoes="Erro ao enviar declara√ß√£o - verificar manualmente"
                )
                
                self.limpar_dados_parciais_grupo(cpf_titular)
                return "erro"
            
        except Exception as e:
            print(f"‚ùå Erro ao processar grupo individual: {e}")
            traceback.print_exc()
            
            # Salvar checkpoint com status "erro"
            self.salvar_checkpoint(
                cpf_titular,
                nome_titular,
                "erro_processamento",
                "erro",
                observacoes=f"Erro durante processamento: {str(e)}"
            )
            
            self.limpar_dados_parciais_grupo(cpf_titular)
            return "erro"
    
    def processar_dependentes_grupo(self, dependentes):
        """Processa todos os dependentes de um grupo"""
        try:
            if not dependentes:
                print("‚ÑπÔ∏è Nenhum dependente para processar")
                return
            
            print(f"\nüë• Processando {len(dependentes)} dependentes...")
            
            dependentes_pulados = 0
            
            for dependente in dependentes:
                cpf_dep = dependente['CPF']
                
                # Verificar se o valor do dependente √© nulo ANTES de adicionar √† lista
                valor_dependente_raw = dependente.get('VALOR_DEPENDENTE') or dependente.get('TOTAL')
                if valor_dependente_raw is None or self.valor_eh_zero_ou_nulo(valor_dependente_raw):
                    print(f"   ‚è≠Ô∏è Dependente {cpf_dep} tem valor zero ou nulo - n√£o ser√° adicionado (n√£o assina mais o plano)")
                    dependentes_pulados += 1
                    continue
                
                dependencia_original = dependente.get('DEPENDENCIA', '').strip()
                
                # Mapear depend√™ncia para valor do formul√°rio
                relacao_valor = self.mapear_dependencia(dependencia_original)
                agregado_outros = None
                
                # Se for "Agregado/Outros", usar a depend√™ncia original como especifica√ß√£o
                if relacao_valor == '99':  # 99 = "Agregado/Outros"
                    agregado_outros = dependencia_original
                
                print(f"   üìù Adicionando dependente: {cpf_dep}")
                print(f"      Rela√ß√£o: {dependencia_original} ‚Üí {relacao_valor}")
                if agregado_outros:
                    print(f"      Descri√ß√£o: {agregado_outros}")
                
                
                # Verificar se dependente j√° foi processado
                if self.verificar_dependente_processado(self.cpf_titular_atual, cpf_dep):
                    print(f"   ‚ö†Ô∏è Dependente {cpf_dep} j√° foi processado - pulando")
                    continue
                
                # Adicionar dependente
                if self.adicionar_dependente(cpf_dep, relacao_valor, agregado_outros):
                    print(f"   ‚úÖ Dependente {cpf_dep} adicionado com sucesso")
                else:
                    print(f"   ‚ùå Falha ao adicionar dependente {cpf_dep}")
            
            if dependentes_pulados > 0:
                print(f"\n   ‚ÑπÔ∏è Total de dependentes n√£o adicionados (valor zero/nulo): {dependentes_pulados}")
        
        except Exception as e:
            print(f"‚ùå Erro ao processar dependentes: {e}")
    
    def processar_planos_grupo(self, titular):
        """Processa planos de sa√∫de de um grupo"""
        try:
            # Dados do plano - usando dados do Excel
            cnpj_operadora = titular.get('CNPJ_OPERADORA', CNPJ_OPERADORA_PADRAO)  # CNPJ padr√£o
            valor_titular_raw = titular.get('VALOR_PLANO', titular.get('TOTAL', "100.00"))  # Valor do Excel
            valor_titular = self.formatar_valor(valor_titular_raw)  # Formatar com 2 casas decimais
            
            print(f"\nüè• Processando plano de sa√∫de...")
            print(f"   CNPJ: {cnpj_operadora}")
            print(f"   Valor: {valor_titular}")
            
            
            # Verificar se plano j√° foi processado
            if self.verificar_plano_processado(self.cpf_titular_atual, cnpj_operadora):
                print(f"   ‚ö†Ô∏è Plano j√° foi processado - pulando")
                return
            
            # Adicionar plano
            if self.adicionar_plano_saude(cnpj_operadora, valor_titular):
                print(f"   ‚úÖ Plano adicionado com sucesso")
            else:
                print(f"   ‚ùå Falha ao adicionar plano")
        
        except Exception as e:
            print(f"‚ùå Erro ao processar planos: {e}")
    
    def processar_info_dependentes_grupo(self, dependentes):
        """Processa informa√ß√µes dos dependentes (valores pagos pelos dependentes)"""
        try:
            if not dependentes:
                print("‚ÑπÔ∏è Nenhum dependente para processar informa√ß√µes")
                return
            
            print(f"\nüí∞ Processando informa√ß√µes de {len(dependentes)} dependentes...")
            
            dependentes_pulados = 0
            
            for dependente in dependentes:
                cpf_dep = dependente['CPF']
                valor_dependente_raw = dependente.get('VALOR_DEPENDENTE', dependente.get('TOTAL', "50.00"))
                
                # Verificar se o valor √© zero ou nulo ANTES de processar
                if self.valor_eh_zero_ou_nulo(valor_dependente_raw):
                    print(f"   ‚è≠Ô∏è Dependente {cpf_dep} tem valor zero ou nulo - pulando (n√£o assina mais o plano)")
                    dependentes_pulados += 1
                    continue
                
                valor_dependente = self.formatar_valor(valor_dependente_raw)  # Formatar com 2 casas decimais
                
                print(f"   üí∞ Adicionando informa√ß√£o do dependente: {cpf_dep}")
                print(f"      Valor: {valor_dependente}")
                
                # Verificar se informa√ß√£o j√° foi processada
                if self.verificar_info_dependente_processado(self.cpf_titular_atual, cpf_dep):
                    print(f"   ‚ö†Ô∏è Informa√ß√£o do dependente {cpf_dep} j√° foi processada - pulando")
                    continue
                
                # Adicionar informa√ß√£o do dependente
                if self.adicionar_informacao_dependente(cpf_dep, valor_dependente):
                    print(f"   ‚úÖ Informa√ß√£o do dependente {cpf_dep} adicionada com sucesso")
                else:
                    print(f"   ‚ùå Falha ao adicionar informa√ß√£o do dependente {cpf_dep}")
            
            if dependentes_pulados > 0:
                print(f"\n   ‚ÑπÔ∏è Total de dependentes pulados (valor zero/nulo): {dependentes_pulados}")
        
        except Exception as e:
            print(f"‚ùå Erro ao processar informa√ß√µes dos dependentes: {e}")
    
    def verificar_dependente_processado(self, cpf_titular, cpf_dependente):
        """Verifica se um dependente j√° foi processado"""
        try:
            conn = sqlite3.connect(BANCO_DADOS)
            cursor = conn.cursor()
            cursor.execute('''
                SELECT COUNT(*) FROM dependentes_processados 
                WHERE cpf_titular = ? AND cpf_dependente = ?
            ''', (cpf_titular, cpf_dependente))
            count = cursor.fetchone()[0]
            conn.close()
            return count > 0
        except:
            return False
    
    def verificar_plano_processado(self, cpf_titular, cnpj_operadora):
        """Verifica se um plano j√° foi processado"""
        try:
            conn = sqlite3.connect(BANCO_DADOS)
            cursor = conn.cursor()
            cursor.execute('''
                SELECT COUNT(*) FROM planos_processados 
                WHERE cpf_titular = ? AND cnpj_operadora = ?
            ''', (cpf_titular, cnpj_operadora))
            count = cursor.fetchone()[0]
            conn.close()
            return count > 0
        except:
            return False
    
    def verificar_info_dependente_processado(self, cpf_titular, cpf_dependente):
        """Verifica se uma informa√ß√£o de dependente j√° foi processada"""
        try:
            conn = sqlite3.connect(BANCO_DADOS)
            cursor = conn.cursor()
            cursor.execute('''
                SELECT COUNT(*) FROM info_dependentes_processados 
                WHERE cpf_titular = ? AND cpf_dependente = ?
            ''', (cpf_titular, cpf_dependente))
            count = cursor.fetchone()[0]
            conn.close()
            return count > 0
        except:
            return False
    
    def executar(self):
        """
        Fun√ß√£o principal que executa todo o processo de automa√ß√£o EFD-REINF.
        
        Esta √© a fun√ß√£o de entrada principal que:
        1. Coleta configura√ß√µes do usu√°rio (verifica√ß√£o manual, m√©todo de assinatura)
        2. Configura coordenadas para m√©todo B se necess√°rio
        3. Abre o site da Receita Federal
        4. Aguarda login manual do usu√°rio
        5. Processa todos os grupos do Excel automaticamente
        6. Gera relat√≥rios de progresso
        
        Configura√ß√µes solicitadas:
        - Verifica√ß√£o manual de dados (S/N)
        - M√©todo de assinatura (1=teclas, 2=mouse)
        - Coordenadas do mouse (apenas para m√©todo 2)
        
        O processo continua at√© todos os CPFs serem processados ou erro fatal.
        Checkpoints permitem retomar o processo posteriormente.
        
        Raises:
            Exception: Capturadas e logadas, processo pode ser retomado via checkpoints
        """
        print("\n" + "="*60)
        print("ü§ñ AUTOMA√á√ÉO EFD-REINF")
        print("="*60)
        print("\nüí° FUNCIONAMENTO:")
        print("   1. Chrome abre no site")
        print("   2. VOC√ä faz login e navega at√© o formul√°rio")
        print("   3. C√ìDIGO processa TODOS os grupos automaticamente")
        print("   4. Pula automaticamente CPFs j√° lan√ßados")
        print("   5. ‚ú® NOVO: Envia automaticamente cada declara√ß√£o")
        print("="*60)
        
        # Configura√ß√µes autom√°ticas do config.py
        print("\n‚öôÔ∏è CONFIGURA√á√ïES AUTOM√ÅTICAS")
        print("="*40)
        
        # Configurar verifica√ß√£o manual usando config.py
        if VERIFICACAO_MANUAL_PADRAO:
            print("‚úÖ Modo MANUAL: Com verifica√ß√£o antes do envio")
            print("üí° O sistema pausar√° para voc√™ verificar os dados")
        else:
            print("‚úÖ Modo AUTOM√ÅTICO: Sem verifica√ß√£o manual")
            print("‚ö†Ô∏è O sistema enviar√° as declara√ß√µes automaticamente!")
        
        # Configurar m√©todo de assinatura b√°sico usando config.py
        if METODO_ASSINATURA_PADRAO == 2:
            self.metodo_assinatura = 2
            print("‚úÖ M√©todo B selecionado (sequ√™ncia alternativa)")
        else:
            self.metodo_assinatura = 1
            print("‚úÖ M√©todo A selecionado (sequ√™ncia padr√£o)")
        
        print("\nüí° Para alterar essas configura√ß√µes, edite o arquivo config.py")
        print("="*60)
        
        # Abrir site
        self.abrir_site()
        
        # Aguardar login e navega√ß√£o manual
        self.aguardar_login()
        
        # Configurar coordenadas para M√©todo B DEPOIS de acessar o ECAC
        if METODO_ASSINATURA_PADRAO == 2:
            print("\n" + "="*60)
            print("üìç CONFIGURA√á√ÉO DE COORDENADAS - M√âTODO B")
            print("="*60)
            print("Agora que o ECAC est√° aberto, configure as coordenadas do mouse")
            print("para o M√©todo B de assinatura eletr√¥nica.")
            
            coordenadas_configuradas = False
            
            while not coordenadas_configuradas:
                try:
                    if self.configurar_coordenadas_metodo_b():
                        coordenadas_configuradas = True
                        print("‚úÖ Coordenadas configuradas com sucesso!")
                    else:
                        print("\n‚ö†Ô∏è Falha na configura√ß√£o de coordenadas")
                        print("Op√ß√µes:")
                        print("1Ô∏è‚É£ - Tentar novamente")
                        print("2Ô∏è‚É£ - Mudar para M√©todo A")
                        print("3Ô∏è‚É£ - Cancelar execu√ß√£o")
                        
                        opcao_erro = input("\nEscolha uma op√ß√£o (1, 2 ou 3): ").strip()
                        
                        if opcao_erro == "1":
                            print("üîÑ Tentando configurar coordenadas novamente...")
                            continue
                        elif opcao_erro == "2":
                            print("üîÑ Mudando para M√©todo A...")
                            self.metodo_assinatura = 1
                            coordenadas_configuradas = True  # Sair do loop
                        elif opcao_erro == "3":
                            print("‚ùå Execu√ß√£o cancelada pelo usu√°rio")
                            return  # Sair da fun√ß√£o executar
                        else:
                            print("‚ö†Ô∏è Op√ß√£o inv√°lida, tentando novamente...")
                            continue
                            
                except (EOFError, KeyboardInterrupt):
                    print("\nüîÑ Mudando para M√©todo A devido √† interrup√ß√£o...")
                    self.metodo_assinatura = 1
                    coordenadas_configuradas = True
        
        # Processar todos os grupos
        self.processar_todos_os_grupos()
        
        print("\n‚úÖ Processo conclu√≠do!")
        print("üí° Use o gerenciador de checkpoint para ver detalhes: python gerenciar_checkpoint.py")
        print("üöÄ Sistema totalmente funcional com automa√ß√£o completa!")

# ============================================================
# PROGRAMA PRINCIPAL
# ============================================================

def main():
    """Fun√ß√£o principal"""
    automacao = None
    
    try:
        automacao = AutomacaoEFD()
        automacao.executar()
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()
    finally:
        if automacao:
            automacao.fechar()

if __name__ == "__main__":
    main()

